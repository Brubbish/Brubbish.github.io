<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brubbish&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brubbish.github.io/"/>
  <updated>2020-04-05T05:34:20.094Z</updated>
  <id>https://brubbish.github.io/</id>
  
  <author>
    <name>Bruce</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【置顶】python 爬虫学习</title>
    <link href="https://brubbish.github.io/710f8e5f.html"/>
    <id>https://brubbish.github.io/710f8e5f.html</id>
    <published>2099-12-31T15:58:00.000Z</published>
    <updated>2020-04-05T05:34:20.094Z</updated>
    
    <content type="html"><![CDATA[<p>就此开一篇单独记录 py 爬虫的学习<u>以及实操中遇到的问题</u>(可能吧)<br />（分割线用（***或—））</p><hr /><h1 id="爬虫入门"><a class="markdownIt-Anchor" href="#爬虫入门"></a> 爬虫入门</h1><p>以下为 mooc 上 BIT 嵩天老师课程<a href="https://www.icourse163.org/learn/BIT-1001870001?tid=1206951268#/learn/announce" target="_blank" rel="noopener">Python 网络爬虫与信息提取</a>的学习</p><h2 id="requests-库"><a class="markdownIt-Anchor" href="#requests-库"></a> requests 库</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>管理员打开 cmd，安装 requests 库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/17/8tyB5j.md.png" alt="以此检测安装成功" /></p><h4 id="tip-pip-下载超时timeout"><a class="markdownIt-Anchor" href="#tip-pip-下载超时timeout"></a> tip： pip 下载超时（timeout）</h4><p>cmd 输入指令：</p><ol><li>pip --default-timeout=100 install -U pip</li></ol><p>或</p><ol start="2"><li>pip install pip -U</li></ol><p>pip config set global.index-url <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br />（升级 pip 后更换为的清华镜像）</p><h3 id="rrequestgeturl"><a class="markdownIt-Anchor" href="#rrequestgeturl"></a> r=request.get(url)</h3><p>构造一个向服务器请求资源的 request 对象，返回一个包含服务器资源的 response 对象<br />response 对象包含了服务器返回的所有信息</p><p><img src="https://s1.ax1x.com/2020/03/17/8tysGn.md.png" alt="8tysGn.md.png" /></p><p>r.aparrent_encoding: 根据网页内容分析出的编码方式<br />r.encoding: 如果 header 中不存在 charset，则默认编码为 ISO-8859-1</p><h3 id="爬取网页的通用代码框架"><a class="markdownIt-Anchor" href="#爬取网页的通用代码框架"></a> 爬取网页的通用代码框架</h3><p><img src="https://s1.ax1x.com/2020/03/17/8tyy2q.md.png" alt="8tyy2q.md.png" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requsets</span><br><span class="line"><span class="comment">#----</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()    <span class="comment"># 判断状态  如果不是200，则引发HTTPError异常</span></span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"><span class="comment">#----</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    url=<span class="string">"http://www.baidu.com"</span></span><br><span class="line">    print(<span class="string">"getHTMLText(url))</span></span><br></pre></td></tr></table></figure><p>try：python 捕捉异常语句，详见：<a href="https://www.runoob.com/python/python-exceptions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-exceptions.html</a></p><h3 id="requests-库主要方法"><a class="markdownIt-Anchor" href="#requests-库主要方法"></a> requests 库主要方法</h3><p><img src="https://s1.ax1x.com/2020/03/17/8ty6x0.md.png" alt="8ty6x0.md.png" /></p><p>requests.request(method, url, **kwargs)<br />requests.get(url, params=None, **kwargs)<br />requests.head(url, **kwargs)<br />requests.post(url, data=None, json=None, **kwargs)<br />requests.put(url, data=None, **kwargs)<br />requests.patch(url, data=None, **kwargs)<br />requests.delete(url, **kwargs)</p><h4 id="kwargs"><a class="markdownIt-Anchor" href="#kwargs"></a> **kwargs:</h4><ol><li>params：字典或字节序列，作为参数添加到 url 中</li><li>data：字典、字节序列或文件对象，作为 request 的内容</li><li>json：json 格式的数据，作为 request 的内容</li><li>headers：定制 header</li><li>cookies</li><li>auth</li><li>files：传输文件</li><li>timeout：设定超时时间，单位为秒</li><li>proxies：设置代理服务器</li><li>allow_redirects</li><li>stream</li><li>verify</li><li>cert</li></ol><h3 id="爬虫尺寸"><a class="markdownIt-Anchor" href="#爬虫尺寸"></a> 爬虫尺寸</h3><p>小规模：爬取网页。数据量小，速度不敏感。使用 requests 库<br />中规模：爬取网站。数据量大，速度敏感。使用 scrapy 库<br />大规模：爬取全网。（搜索引擎）</p><h3 id="限制爬虫"><a class="markdownIt-Anchor" href="#限制爬虫"></a> 限制爬虫</h3><ol><li>来源审查：判断 user-agent</li><li>robots 协议</li></ol><h3 id="robots-协议"><a class="markdownIt-Anchor" href="#robots-协议"></a> robots 协议</h3><p>Robots Exclusion Standard<br />网络爬虫先识别 robots.txt 再进行爬取<br />robots 协议时建议而非约束性，不遵守的话存在法律风险（类人行为可不参考 robots 协议）</p><h3 id="拒绝被爬尝试修改-user-agent"><a class="markdownIt-Anchor" href="#拒绝被爬尝试修改-user-agent"></a> 拒绝被爬：尝试修改 user-agent</h3><p><img src="https://s1.ax1x.com/2020/03/19/8y3yQ0.md.png" alt="主要为黄色荧光部分" /></p><h3 id="搜索引擎关键词提交"><a class="markdownIt-Anchor" href="#搜索引擎关键词提交"></a> 搜索引擎关键词提交</h3><p>百度：<a href="https://www.baidu.com/s?wd=" target="_blank" rel="noopener">https://www.baidu.com/s?wd=</a><u>关键词</u></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keyword=<span class="string">"xxxx"</span></span><br><span class="line"></span><br><span class="line">kv=&#123;<span class="string">'wd'</span>:keyword&#125;</span><br><span class="line"></span><br><span class="line">r=requests.get(<span class="string">"https://www.baidu.com/s"</span>,params=kv)</span><br></pre></td></tr></table></figure><h3 id="图片的爬取和存储"><a class="markdownIt-Anchor" href="#图片的爬取和存储"></a> 图片的爬取和存储</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">"....../...jpg"</span></span><br><span class="line">root=<span class="string">"D://pics//"</span></span><br><span class="line">path=root+url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]    <span class="comment">#需要import os</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">        os.mkdir(root)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        r=requests.get(url)</span><br><span class="line">        <span class="comment">#保存↓</span></span><br><span class="line">        <span class="keyword">with</span> open(path,<span class="string">'wb'</span>)<span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(<span class="string">"成功“)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        print("</span>文件已存在<span class="string">")</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    print("</span>失败<span class="string">")</span></span><br></pre></td></tr></table></figure><h2 id="beautifulsoup-库"><a class="markdownIt-Anchor" href="#beautifulsoup-库"></a> BeautifulSoup 库</h2><p>BeautifulSoup 库是一个解析、遍历、维护标签树的功能库</p><h3 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h3><p>cmd 下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">或</span><br><span class="line"><span class="keyword">import</span> bs4</span><br></pre></td></tr></table></figure><p>作用：html 文档 ↔ 标签树 ↔beautifulsoup 类</p><h3 id="beautifulsoup-基本元素"><a class="markdownIt-Anchor" href="#beautifulsoup-基本元素"></a> BeautifulSoup 基本元素</h3><p><img src="https://s1.ax1x.com/2020/03/19/8yjZ5R.md.png" alt="8yjZ5R.md.png" /></p><p><img src="https://s1.ax1x.com/2020/03/19/8yjEVJ.md.png" alt="8yjEVJ.md.png" /></p><p>例：<br />打印标签</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">r=requests.get(<span class="string">"https://python123.io/ws/demo.html"</span>)</span><br><span class="line">demo=r.text</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">"html.parser"</span>)  <span class="comment">#parser:html解析器</span></span><br><span class="line">soup.title  <span class="comment">#打印title标签</span></span><br><span class="line">soup.a.attrs[<span class="string">"href"</span>]   <span class="comment">#打印标签的链接</span></span><br></pre></td></tr></table></figure><h3 id="html-内容遍历"><a class="markdownIt-Anchor" href="#html-内容遍历"></a> html 内容遍历</h3><p>html–树形结构<br />遍历：下行遍历、上行遍历、平行遍历</p><h4 id="下行遍历"><a class="markdownIt-Anchor" href="#下行遍历"></a> 下行遍历：</h4><p><img src="https://s1.ax1x.com/2020/03/21/8fFk0H.png" alt=" " /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(child) <span class="keyword">in</span> soup.body.children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获得子节点的数量：</span><br><span class="line">len(soup.body.contents)</span><br><span class="line"></span><br><span class="line">获得其中某个的内容：</span><br><span class="line">soup.body.contents[<span class="number">1</span>]   <span class="comment">#获得第二个</span></span><br></pre></td></tr></table></figure><p>ps:'儿子节点’这种叫法听起来真是贼奇怪</p><h4 id="上行遍历"><a class="markdownIt-Anchor" href="#上行遍历"></a> 上行遍历：</h4><p><img src="https://s1.ax1x.com/2020/03/21/8fFPXD.png" alt=" " /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看父标签:</span><br><span class="line">soup.title.parent</span><br><span class="line">最高级标签（&lt;html&gt;他爸是他自己（.....)</span><br><span class="line"></span><br><span class="line">完整遍历：</span><br><span class="line">soup=BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(parent)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(parent)</span><br></pre></td></tr></table></figure><h4 id="平行遍历"><a class="markdownIt-Anchor" href="#平行遍历"></a> 平行遍历：</h4><p>发生在同一个父节点下的各个节点间<br />平行遍历获得的下一个结点不一定是标签类型</p><p><img src="https://s1.ax1x.com/2020/03/21/8fFFne.png" alt=" " /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看下一个平行标签:</span><br><span class="line">soup.a.next_sibling</span><br><span class="line">查看前一个平行标签:</span><br><span class="line">soup.a.previous_sibling</span><br><span class="line"></span><br><span class="line">完整：</span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next（或前序结点previous）_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><h3 id="prettify"><a class="markdownIt-Anchor" href="#prettify"></a> Prettify</h3><p>作用：在每个标签后添加换行符，print 的时候易于阅读<br />使用方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(soup.prettify())</span><br><span class="line"></span><br><span class="line">print(soup.a.prettify())    <span class="comment">#单独对某个标签进行处理</span></span><br></pre></td></tr></table></figure><p> </p><p>以上为 2020.3.16-2020.3.21</p><hr /><h2 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h2><p>regular expression (RE)</p><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th><th></th><th></th></tr></thead><tbody><tr><td>.</td><td>任何单个字符</td><td></td><td></td><td></td></tr><tr><td>[ ]</td><td>字符集</td><td>[abc]:a、b、c; [a-z]:a~z 单个字符</td><td></td><td></td></tr><tr><td>[^ ]</td><td>非字符集</td><td>[^abc]: 非 a、b、c 的单个字符</td><td></td><td></td></tr><tr><td>*</td><td>前一个字符 0 次或无限次扩展</td><td>abc *：ab、abc、abcc… …</td><td></td><td></td></tr><tr><td>+</td><td>前一个字符 1 次或无限次扩展</td><td>abc *：abc、abcc… …</td><td></td><td></td></tr><tr><td>?</td><td>前一个字符 0 次或 1 次扩展</td><td>abc *：abc、abcc… …</td><td></td><td></td></tr><tr><td>\</td><td></td><td>左右表达式任意一个</td><td>abc\</td><td>def :abc 或 def</td></tr><tr><td>{num}</td><td>扩展前一个字符 m 次</td><td>ab{2}c：abbc</td><td></td><td></td></tr><tr><td>{m, n}</td><td>扩展前一个字符 m~n 次：ab{1, 2}c:abc, abbc</td><td></td><td></td><td></td></tr><tr><td>^</td><td>匹配字符串开头</td><td>^abc:abc 在字符串的开头</td><td></td><td></td></tr><tr><td>$</td><td>匹配字符串结尾</td><td>$abc:abc 在字符串的结尾</td><td></td><td></td></tr><tr><td>( )</td><td>分组标记，内部使用\</td><td>操作符</td><td>(abc):abc; (abc</td><td>def):abc 或 def</td></tr><tr><td>\d</td><td>等价于 0~9</td><td></td><td></td><td></td></tr><tr><td>\w</td><td>等价于 A~Z, a~z, 0~9, _</td><td></td><td></td><td></td></tr></tbody></table><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/regexp/regexp-tutorial.html</a></p><h2 id="re-库"><a class="markdownIt-Anchor" href="#re-库"></a> Re 库</h2><h3 id="调用方法"><a class="markdownIt-Anchor" href="#调用方法"></a> 调用方法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h3 id="表达式的表达类型"><a class="markdownIt-Anchor" href="#表达式的表达类型"></a> 表达式的表达类型</h3><p>raw string：不包含转义符(\)的字符串<br />string 类型(将’‘理解为转义符)<br />raw string 如：r’[1-9]\d{5}’、r’\d{3}-\d{8}\d{4}-\d{7}’<br />string 如：[1-9]\\d{5}’\\d{3}-\\d{8}\\d{4}-\\d{7}’</p><h3 id="主要功能函数"><a class="markdownIt-Anchor" href="#主要功能函数"></a> 主要功能函数</h3><p><img src="https://s1.ax1x.com/2020/03/26/GSHMGD.png" alt=" " /></p><ol><li>re.search(pattern,string,flags=0)</li><li>re.match(pattern,string,flags=0)</li><li>re.findall(pattern,string,flags=0)</li><li>re.finditer(pattern,stirng,flags=0)</li></ol><p>pattern: 正则表达式的字符串或原生字符串表示<br />string：待匹配字符串</p><p>flags：正则表达式使用时的一些控制标记，包括：<br />re. I:ignorecase, 忽略大小写<br />re. M:multiline, 使用’^‘时将每行都当作匹配开始<br />re. S:dotall, 让’.'匹配所有字符，包括换行符</p><ol start="5"><li>re.search(pattern,string,maxsplit=0,flags=0)</li></ol><p>maxsplit: 最大分割数，限制分割的数量为 n，将剩下的所有部分输出为第 n+1 个</p><ol start="6"><li>re.sub(pattern,repl,string,count=0,flags=0)</li></ol><p>repl: 替换的字符串<br />count：替换的最大次数<br /> </p><p>以上为2020.03.22-2020.03.28</p><hr /><h3 id="re库的match对象"><a class="markdownIt-Anchor" href="#re库的match对象"></a> RE库的match对象</h3><p>用 type(match)检查 match 的类型</p><p><img src="https://s1.ax1x.com/2020/04/02/GGx6qs.png" alt=" " /><br /><img src="https://s1.ax1x.com/2020/04/02/GGxyrj.png" alt=" " /></p><h3 id="贪婪匹配和最小匹配"><a class="markdownIt-Anchor" href="#贪婪匹配和最小匹配"></a> 贪婪匹配和最小匹配</h3><p>re库默认采用贪婪匹配，即输出匹配最长的子串</p><h2 id="scrapy库"><a class="markdownIt-Anchor" href="#scrapy库"></a> Scrapy库</h2><h3 id="scrapy爬虫框架安装"><a class="markdownIt-Anchor" href="#scrapy爬虫框架安装"></a> scrapy爬虫框架安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br><span class="line">scrapy -h    # 测试安装成功</span><br></pre></td></tr></table></figure><h3 id="scrapy-爬虫框架结构"><a class="markdownIt-Anchor" href="#scrapy-爬虫框架结构"></a> scrapy 爬虫框架结构</h3><p>5个主体+2个中间件<br />3个主体（engine+downloader+scheduler）为已有实现<br />2个主体（item pipelines+spiders）为用户配置：<br />item pipelines对获得信息进行处理<br />spiders提供url和解析网页的内容</p><p>**以下3个不需要用户配置<br />engine控制所有模块之间的数据流，根据条件触发事件<br />downloader根据请求下载<br />scheduler对所有爬取进行调度<br />在以上三个中有一个中间件：downloader middleware</p><h3 id="scrapy库爬虫常用命令"><a class="markdownIt-Anchor" href="#scrapy库爬虫常用命令"></a> scrapy库爬虫常用命令</h3><p>格式：scrapy<command>[options][args]<br />一个工程是最大的单元（大的scrapy框架），其中有多个spider<br /><img src="https://s1.ax1x.com/2020/04/05/GBh3Pf.png" alt=" " /></p><h3 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h3><p>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就此开一篇单独记录 py 爬虫的学习&lt;u&gt;以及实操中遇到的问题&lt;/u&gt;(可能吧)&lt;br /&gt;
（分割线用（***或—））&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;爬虫入门&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#爬虫入门&quot;&gt;&lt;/a&gt; 爬虫入门
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://brubbish.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2020.04.06-2020.04.12</title>
    <link href="https://brubbish.github.io/51835.html"/>
    <id>https://brubbish.github.io/51835.html</id>
    <published>2020-04-12T04:10:30.000Z</published>
    <updated>2020-04-12T06:38:41.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="菜单功能限制"><a class="markdownIt-Anchor" href="#菜单功能限制"></a> 菜单功能限制</h1><h2 id="相关函数"><a class="markdownIt-Anchor" href="#相关函数"></a> 相关函数</h2><p>要将软件菜单和窗口变得不可用，可用以下函数</p><ol><li>EnableMenultem()<br />允许或进制指定的菜单条目<br />参数：菜单句柄、目标菜单条目的标识符、控制标志（允许、灰化、禁止等）<br />返回值：返回菜单以前的状态</li><li>EnableWindow()<br />允许或禁止指定窗口<br />参数：窗口句柄、true/false<br />返回值：0表示失败，非0表示成功</li></ol><h2 id="拆解菜单限制保护"><a class="markdownIt-Anchor" href="#拆解菜单限制保护"></a> 拆解菜单限制保护</h2><p>修改控制标志或true/false</p><h1 id="keyfile保护"><a class="markdownIt-Anchor" href="#keyfile保护"></a> KeyFile保护</h1><p>付费后将作者提供的注册文件keyfile放到指定目录下可用让软件成为正版<br />软件每次启动时都会读取该文件，然后利用某种算法进行处理，以此判断结果是否正确</p><h2 id="相关api函数"><a class="markdownIt-Anchor" href="#相关api函数"></a> 相关api函数</h2><table><thead><tr><th>api函数</th><th>作用</th></tr></thead><tbody><tr><td>FindFirstA</td><td>确定文件是否存在</td></tr><tr><td>CreateFileA、_lopen</td><td>确定文件是否存在；打开文件获得其句柄</td></tr><tr><td>GetFileSizeA、GetFileEx</td><td>获得文件的大小</td></tr><tr><td>GetFileSize、GetFileAttributesExA</td><td>获得文件的属性</td></tr><tr><td>SetFilePointer、GetFilePointerEx</td><td>移动文件指针</td></tr><tr><td>ReadFile</td><td>读取文件内容</td></tr></tbody></table><h1 id="网络验证"><a class="markdownIt-Anchor" href="#网络验证"></a> 网络验证</h1><p>思路是拦截服务器返回的数据包，分析程序是如何处理数据包的</p><h2 id="相关函数-2"><a class="markdownIt-Anchor" href="#相关函数-2"></a> 相关函数</h2><p>常用的有send()、recv()【这两个是socket（套接字，计算机之间进行通信的一种约定或一种方式）函数】、WSASend()、WSARecv()等</p><h2 id="破解网络验证的一般思路"><a class="markdownIt-Anchor" href="#破解网络验证的一般思路"></a> 破解网络验证的一般思路</h2><p>如果验证的数据包内容固定，可以抓取数据包，写一个本地服务端模拟服务器<br />如果不固定则需要找出相应的算法</p><ol><li>分析发送的数据包<br />在od中对send()之类的函数设断，分析加密的位置和方式</li><li>分析接收的数据包<br />客户端程序使用recv()之类的函数接收数据，然后进行解密。对解密后数据存放的地址下内存读断点</li><li>解除网络验证<br />编写一个服务端，模拟服务器来接收和发送数据<br />如果软件用域名登陆服务器，可以修改hosts，使域名指向本地<br />如果软件用ip地址连接服务器，可以用inet_addr或connect等设断，将ip地址修改为本地ip地址，或用代理软件将ip地址指向本地</li></ol><p>网络验证的关键是数据包分析</p><h1 id="常用断点设置"><a class="markdownIt-Anchor" href="#常用断点设置"></a> 常用断点设置</h1><p><img src="https://s1.ax1x.com/2020/04/09/GInJdU.png" alt=" " /></p><h1 id="加密算法"><a class="markdownIt-Anchor" href="#加密算法"></a> 加密算法</h1><h2 id="单向散列算法"><a class="markdownIt-Anchor" href="#单向散列算法"></a> 单向散列算法</h2><p>即hash算法，是将任意长度的消息压缩到某一固定长度的函数（不可逆）<br />因为是不可逆算法，只能使用hash函数作为加密的一个中间步骤。如，对用户名进行hash变换，再用这个结果进行可逆的加密变换，生成注册码</p><h3 id="md5算法"><a class="markdownIt-Anchor" href="#md5算法"></a> MD5算法</h3><p>MD5消息摘要算法<br />对任意长度的消息进行运算，产生128位的消息摘要</p><h4 id="算法原理"><a class="markdownIt-Anchor" href="#算法原理"></a> 算法原理</h4><ol><li>数据填充<br />填充消息，使消息长度（bit）对512求余的结果等于448【比512的倍数小64位】（本身满足了也要）。方法是：附一个1在后面，然后用0来填充。</li><li>添加长度<br />在结尾用64位记录原文长度，最终消息长度是512的整数倍</li><li>初始化变量<br />MD5的结果按32位一组分成4组，由4个寄存器（A、B、C、D）进行演变得到<br />寄存器初始值为：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">原本应为：</span><br><span class="line">A&#x3D;0x01234567</span><br><span class="line">B&#x3D;0x89ABCDEF</span><br><span class="line">C&#x3D;0xFEDCBA98</span><br><span class="line">D&#x3D;0x76543210</span><br><span class="line">为了在内存中也长那样↑，所以要调整成：</span><br><span class="line">A &#x3D; 0x67452301;</span><br><span class="line">B &#x3D; 0xEFCDAB89;</span><br><span class="line">C &#x3D; 0x98BADCFE;</span><br><span class="line">D &#x3D; 0x10325476;</span><br></pre></td></tr></table></figure><ol start="4"><li>数据处理<br />4个辅助函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F(X, Y, Z) &#x3D;(X&amp;Y) | ((~X) &amp; Z)</span><br><span class="line">G(X, Y, Z) &#x3D;(X&amp;Z) | (Y &amp; (~Z))</span><br><span class="line">H(X, Y, Z) &#x3D;X^Y^Z</span><br><span class="line">I(X, Y, Z)&#x3D;Y^(X|(~Z))</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/09/GInbFg.png" alt="流程" /><br />将ABCD的副本abcd中的3个经过运算后与第四个相加，再加上两个常数，并将所得的值<strong>循环左移</strong>s位，最后将所得结果加上abcd之一，回送至ABCD（一次子循环）</p><ul><li>执行的函数和次数：<br />先执行16次F,再执行16次G…共64次（每次主循环）<br />主循环次数：原文长度/512（全部消息）</li><li>相加的两个常数：<br />一个是<strong>利用第2步的原文</strong>，将其等分成16份（每份长度为32位），循环使用其中一份。<br />另一个是4^32*abs(sin(i))得到的整数部分,在第i步中，i用弧度表示。目的是用正弦函数和幂函数消除变换中的线性</li><li>循环左移位数s：有个表<br /><img src="https://s1.ax1x.com/2020/04/12/GLmJmj.png" alt=" " /></li></ul><ol start="5"><li>输出</li></ol><h4 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h4><p>用peid插件krypto analyzer分析，得知程序含有md5的迭代常数，可以猜测使用了md5算法</p><p><img src="https://s1.ax1x.com/2020/04/12/GLmt7n.png" alt="输入的注册码后进行长度等的判断以及数据初步处理" /><br /><img src="https://s1.ax1x.com/2020/04/12/GLmY0s.png" alt="上图call的地址里的代码，通过mov的4个数判断在进行md5初始化" /><br />再根据后续出现的md5算法的正弦函数表（如D76AA478）中的元素可以判断为md5算法</p><h3 id="sha算法"><a class="markdownIt-Anchor" href="#sha算法"></a> SHA算法</h3><p>只看了一点，就放到下周的周报上了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;菜单功能限制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#菜单功能限制&quot;&gt;&lt;/a&gt; 菜单功能限制&lt;/h1&gt;
&lt;h2 id=&quot;相关函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#相关函数&quot;&gt;&lt;/a&gt; 相关
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2020.03.23-2020.03.29</title>
    <link href="https://brubbish.github.io/50551.html"/>
    <id>https://brubbish.github.io/50551.html</id>
    <published>2020-03-29T12:06:00.000Z</published>
    <updated>2020-04-02T05:24:33.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="32位软件逆向技术"><a class="markdownIt-Anchor" href="#32位软件逆向技术"></a> 32位软件逆向技术</h1><h2 id="控制语句"><a class="markdownIt-Anchor" href="#控制语句"></a> 控制语句</h2><h3 id="条件设置指令setcc"><a class="markdownIt-Anchor" href="#条件设置指令setcc"></a> 条件设置指令（SETcc）</h3><p>条件设置指令的形式是“SET<u>cc</u> r/m8”， r/m8表示8位寄存器或单字节内存单元<br />条件设置指令测试一些标志位，把结果记录的目标操作数中<br />测试：</p><ol><li>of（=1溢出）</li><li>zf（=1操作后等于0/相等）</li><li>cf（=1进位/低于）</li><li>cf、zf结合判断</li><li>sf（=1操作后结果为负）</li><li>pf（=1，1个数为偶数）</li><li>sf、of结合判断（=1小于）</li><li>zf（=1或zf!=of，不大于）</li></ol><blockquote><p><a href="https://brubbish.github.io/34199.html#%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A8">https://brubbish.github.io/34199.html#标志寄存器</a></p></blockquote><p>条件设置指令可以用来消除程序中的转移指令<br />如：<br /><img src="https://s1.ax1x.com/2020/03/22/8IMgHA.png" alt=" " /></p><h3 id="纯算法实现逻辑判断"><a class="markdownIt-Anchor" href="#纯算法实现逻辑判断"></a> 纯算法实现逻辑判断</h3><p>一些编译器在优化的时候，会不改变原逻辑的情况下，使用数学技巧把代码中的一些逻辑分支语句转换为算术操作，减少程序中的条件转移指令，提高cpu的流水线的性能（…tql)</p><h2 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h2><p>可以进行反向引用<br />其他类型的分支语句，如if-else都是由低地址向高地址区域引用的（向下跳），依此可以将循环语句识别出来（调回去）<br />确定某段代码是循环代码后就可以分析计数器（一般用ecx）</p><p>如果编译时设置优化“Maximize Speed”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xor ecx,ecx             ;变量初始化sum&#x3D;0</span><br><span class="line">xor eax,eax             ；变量初始化i&#x3D;0</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="数学运算符"><a class="markdownIt-Anchor" href="#数学运算符"></a> 数学运算符</h2><p>如果编译器没有进行优化，则这些运算符很容易理解（…)所以下面都是经过优化的</p><h3 id="整数的加法和减法"><a class="markdownIt-Anchor" href="#整数的加法和减法"></a> 整数的加法和减法</h3><p>用lea代替add和sub<br />lea指令允许用户在一个时钟内完成对c=a+b+78h（某个数）的计算，其中abc都是在有寄存器的情况下才有效的，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lea c,[a+b+78]</span><br><span class="line">&#x3D;&gt;</span><br><span class="line">mov eax,dword ptr [esp]     ;eax&#x3D;a</span><br><span class="line">mov ecx,dword ptr [esp]     ;ecx&#x3D;b</span><br><span class="line">lea edx,dword ptr [ecx+eax+78]</span><br></pre></td></tr></table></figure><blockquote><p>时钟周期：一个时钟脉冲所需要的时间。（计组）</p></blockquote><h3 id="整数的乘法"><a class="markdownIt-Anchor" href="#整数的乘法"></a> 整数的乘法</h3><p>一般被编译成mul（无符号）、imul（有符号）指令（运行慢），为了提高效率会用其他指令完成<br />如果一个数是2的幂，用左移指令shl；3、5、6、7、9等数用加法提高效率：如把exa*5写成&quot;lea eax,[eax+4 *4];lea指令可以实现寄存器乘以2、4、8的运算</p><h3 id="整数的除法"><a class="markdownIt-Anchor" href="#整数的除法"></a> 整数的除法</h3><p>一般被编译成div、idiv指令，大概比乘法运算多消耗10倍cpu时钟<br />如果除数是2的幂，可用右移指令’shr a,n’：a是被除数，n是2的指数（进行无符号数计算）有符号数用sar指令</p><p>除法指令需要用到符号扩展指令cdq，作用是把eax中的数视为有符号数，将eax的最高位（符号位）扩展到edx中。如果eax最高位是1，执行后edx=FFFFFFFF;如果是0，edx=00000000。通过这种方法把32位有符号数变为edx：eax的64位有符号数，满足64位运算指令的需要。</p><p>对除法优化时会用乘法代替除法，优化的公式较多，一例如：倒数相乘a*b=a *(1/b)</p><p>（在下面的64位中描述更完整）</p><h2 id="文本字符串"><a class="markdownIt-Anchor" href="#文本字符串"></a> 文本字符串</h2><h3 id="字符寻址指令"><a class="markdownIt-Anchor" href="#字符寻址指令"></a> 字符寻址指令</h3><p>与字符指针处理相关的指令有mov、lea等<br />mov指令将地址/寄存器中的数据放到目的寄存器中，如mov eax [401000]/[ecx]<br />lea（load effective address）操作数是地址,lea eax,[addr] 就是把addr的地址放入eax中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lea eax,[401000]</span><br><span class="line">等价于</span><br><span class="line">mov eax,401000</span><br></pre></td></tr></table></figure><h3 id="计算字符串长度"><a class="markdownIt-Anchor" href="#计算字符串长度"></a> 计算字符串长度</h3><p>c语言的strlen()：<br /><img src="https://s1.ax1x.com/2020/03/25/8xCwqg.png" alt=" " /></p><h1 id="64位软件逆向技术"><a class="markdownIt-Anchor" href="#64位软件逆向技术"></a> 64位软件逆向技术</h1><p>x64通用寄存器的名称第一个字母由e改为r，共16个；16个128位xmm寄存器（通常用于优化代码）<br /><img src="https://s1.ax1x.com/2020/03/25/8xCDaj.png" alt=" " /></p><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><h3 id="栈平衡"><a class="markdownIt-Anchor" href="#栈平衡"></a> 栈平衡</h3><p>每8字节的栈空间用来保存一个数据<br />尽量保证栈顶对齐值为16（可以被16整除）</p><h3 id="调用约定"><a class="markdownIt-Anchor" href="#调用约定"></a> 调用约定</h3><p>x86（32位）的函数调用有stdcall、__cdecl、fastcall等，x64只有一种寄存器快速调用约定：</p><ol><li>整数：前四个参数用寄存器rcx→rdx→r8→r9，其余放在栈里，入栈顺序从右到左，任何大于8字节或不是1、2、4、8字节的参数用地址传递</li><li>浮点数：前四个参数用xmm寄存器完成：xmm0→xmm1→xmm2→xmm3</li></ol><p><img src="https://s1.ax1x.com/2020/03/25/8xCBZQ.png" alt=" " /></p><p>栈为函数的前四个参数预留了32字节的空间，当函数功能复杂时将寄存器的参数保存到这个预留栈空间。预览栈空间由函数调用者申请、平衡</p><h2 id="数学运算"><a class="markdownIt-Anchor" href="#数学运算"></a> 数学运算</h2><h3 id="整数的除法-2"><a class="markdownIt-Anchor" href="#整数的除法-2"></a> 整数的除法</h3><ol><li>有符号数，除数为2^n<br />x&gt;=0,x/2^n=x&gt;&gt;n<br />x&lt;0,x/2<sup>n=（x+（2</sup>n-1））&gt;&gt;n<br />除数为-2^n时最后用’neg 寄存器’指令求补</li><li>有符号数，除数为正，非2^n<br />32位：x&gt;=0,result=(x<em>c&gt;&gt;32)+x&gt;&gt;n,&lt;0时结果再+1<br />64位：x&gt;=0,result=(x</em>c&gt;&gt;64)+x&gt;&gt;n,&lt;0时结果再+1</li><li>有符号数，除数为负，非2^n<br />32位：x&gt;=0,result=(x<em>c&gt;&gt;32)-x&gt;&gt;n,&lt;0时结果再+1<br />64位：x&gt;=0,result=(x</em>c&gt;&gt;64)-x&gt;&gt;n,&lt;0时结果再+1</li></ol><ul><li>c为魔数</li></ul><ol start="4"><li>无符号数，除数位2^n<br />用shr右移</li><li>无符号数，除数非2^n<br />32位：x&gt;=0,result=x<em>c&gt;&gt;32&gt;&gt;n<br />62位：x&gt;=0,result=x</em>c&gt;&gt;62&gt;&gt;n</li></ol><h2 id="整数取模"><a class="markdownIt-Anchor" href="#整数取模"></a> 整数取模</h2><p>可以用除法指令，但是除法指令执行周期较长，通常优化将其转换成位运算或除法运算，再用除法运算进行优化</p><ol><li>除数b=2^n<br />取得被除数二进制数的最后n位，负数要在n位之前补1：<br />x&gt;=0,result=x&amp;(b-1);x&lt;0,result=(x&amp;(b-1))-1|(~b-1)+1</li><li>除数b!=2^n<br />采用“余数=被除数-商<em>除数”<br />result=x-x/b</em>b</li></ol><h1 id="使用-ollydbg-从零开始-cracking"><a class="markdownIt-Anchor" href="#使用-ollydbg-从零开始-cracking"></a> 使用 OllyDbg 从零开始 Cracking</h1><h2 id="数制系统"><a class="markdownIt-Anchor" href="#数制系统"></a> 数制系统</h2><p>十六进制负数</p><p>从00000000~FFFFFFFF<br />正数：00000000~7FFFFFFF<br />负数：80000000~FFFFFFFF(-1)<br />在od左下角的commandbar可查询十六进制数的十进制值和对应的ASCII字符：<u>? [十六进制值]</u></p><h2 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h2><h3 id="标志寄存器"><a class="markdownIt-Anchor" href="#标志寄存器"></a> 标志寄存器</h3><p><img src="https://s1.ax1x.com/2020/04/02/GGxsMQ.png" alt=" " /></p><ol><li><p>o，溢出标志<br />记录了有符号数运算的结果是否发生了溢出，如果发生溢出OF=1，如果没有OF=0</p></li><li><p>p，奇偶标志<br />指令的结果用二进制表示时1的总数，如果为偶数PF=1，如果不为偶数PF=0</p></li><li><p>z，零标志<br />记录相关指令执行后结果是否为0，如果为0那么ZF=1，如果不为0那么ZF=0</p></li><li><p>s，符号标志<br />运算结果为负设置为1，结果为正设置为0</p></li><li><p>c，进位标志<br />记录了无符号运算的结果是否有向更高位的进位（9位），有置1，无置0</p></li><li><p>其他</p></li></ol><h1 id="python爬虫学习"><a class="markdownIt-Anchor" href="#python爬虫学习"></a> python爬虫学习</h1><p><a href="https://brubbish.github.io/710f8e5f.html##%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">https://brubbish.github.io/710f8e5f.html##正则表达式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;32位软件逆向技术&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#32位软件逆向技术&quot;&gt;&lt;/a&gt; 32位软件逆向技术&lt;/h1&gt;
&lt;h2 id=&quot;控制语句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#控制语句
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2020.03.30-2020.04.05</title>
    <link href="https://brubbish.github.io/50551.html"/>
    <id>https://brubbish.github.io/50551.html</id>
    <published>2020-03-29T12:06:00.000Z</published>
    <updated>2020-04-05T07:21:19.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于上周博客炸了的问题"><a class="markdownIt-Anchor" href="#关于上周博客炸了的问题"></a> 关于上周博客炸了的问题</h1><p>原因是两个_config.yml（可能还有其他文件吧）里所有缩进都不见了…不知道是为啥，就甩给vscode和格式化代码插件吧（…)<br />然后，原来 .yml 要用缩进表示层级啊…<br />嗯顺便换了个主题</p><h1 id="64位软件逆向技术"><a class="markdownIt-Anchor" href="#64位软件逆向技术"></a> 64位软件逆向技术</h1><h2 id="虚函数"><a class="markdownIt-Anchor" href="#虚函数"></a> 虚函数</h2><p>c++的三大核心机制是封装、继承、多态，虚函数是多态的一种体现。在逆向过程中，虚函数是一种还原面向对象代码的重要手段</p><h3 id="虚表"><a class="markdownIt-Anchor" href="#虚表"></a> 虚表</h3><p>不同的类虚表不同，相同的类对象共享一个虚表<br />（以下讲的是用c<ins>写的程序）<br />在构造函数中，首先初始化虚表指针，然后初始化数据成员，最后返回this指针<br />c</ins>语法规定，析构函数需要调用虚函数的无多态性，因此析构函数首先需要赋值虚表<br />构造函数和析构函数特征一致，可根据调用的先后顺序确定<br />虚表地址在全局数据区中</p><h1 id="序列号注册码保护方式"><a class="markdownIt-Anchor" href="#序列号注册码保护方式"></a> 序列号（注册码）保护方式</h1><h2 id="序列号保护机制"><a class="markdownIt-Anchor" href="#序列号保护机制"></a> 序列号保护机制</h2><p>验证用户名和序列号之间的映射关系（…也有可能没有关系）<br />检查方法：</p><ol><li>将用户名等信息通过变换后得到注册码<br />序列号=F（用户名）<br />这个方法计算出的序列号以明文形式在内存中出现<br />也可通过修改比较指令的方法通过检查<br />再现了生成注册码的过程，不安全</li><li>通过注册码验证用户名<br />生成注册码时：序列号=F（用户名），检查注册码时：用户名=F^（-1）（序列号）<br />生成注册码的函数和注册码明文未出现在软件代码中<br />破解可考虑：1.修改比较指令，2.通过F^(-1)找出F</li><li>通过对等函数检查<br />F1（用户名）=F2（序列号）<br />与2类似</li><li>同时将用户名和序列号作为自变量<br />特定值=F（用户名，序列号）<br />可能失去了用户名和序列号的一一对应关系</li></ol><h2 id="攻击序列号保护机制"><a class="markdownIt-Anchor" href="#攻击序列号保护机制"></a> 攻击序列号保护机制</h2><p>找到序列号或修改判断序列号后的跳转指令<br />跟踪程序启动时（需要将注册码读出并判断）或输入注册码，对api设置断点<br />常用：</p><table><thead><tr><th>将输入的内容复制到缓冲区</th><th>判断后显示的对话框</th><th>启动时读取注册码</th></tr></thead><tbody><tr><td>GetWindowTextA(W)、GetDlgItemTextA(W)、GetDlgItemInt</td><td>MessageBoxA(W)、MessageBoxExA(W)、ShowWindow、MessageBoxIndirectA(W)、CreateDialogParamA(W)、CreateDialogIndirectParamA(w)、DialogBoxParamA(W)、DialogBoxIndirectParamA(W)</td><td>RegQueryValueExA(W)(序列号放在注册表);GetPrivateProfileStringA(W)、GetPrivateProfileIntA(W)、GetProfileIntA(W)、GetProfileStringA(W)(序列号放在INI文件中);CreateFileA(W)、_lopen()(放在一般文件)</td></tr></tbody></table><h3 id="数据约束性"><a class="markdownIt-Anchor" href="#数据约束性"></a> 数据约束性</h3><p>只用在明文比较注册码的保护方式中使用。大多数情况下，真正的注册码会在某个时刻出现在内存中，一般会在用户输入的±90h。<br />例如，用od按’Alt+M’打开内存窗口，'Ctrl+B’打开搜索框，搜索输入的序列号，可在附近查找到真序列号</p><h3 id="利用消息断点"><a class="markdownIt-Anchor" href="#利用消息断点"></a> 利用消息断点</h3><p>按下和释放鼠标时会发送WM_LBUTTONDOWN和WM_LUBTTONUP消息，用这个消息下断点可以找到按钮的事件代码</p><h3 id="利用提示信息"><a class="markdownIt-Anchor" href="#利用提示信息"></a> 利用提示信息</h3><p>当输入错时提示“序列号错误，再来一次”等，可以查找相应的字符串，定位到相关代码<br />如od中，右键“search for”-&gt;“all referenced text string”</p><h2 id="字符串比较形式"><a class="markdownIt-Anchor" href="#字符串比较形式"></a> 字符串比较形式</h2><ol><li>寄存器直接比较</li><li>函数比较<br />比较内容放在寄存器或栈中<br />call一个用于比较的函数，可能是api函数或自己写的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call ....</span><br><span class="line">test eax,eax      </span><br><span class="line">jz   ....      ;zf&#x3D;1-&gt;eax&#x3D;0 跳转</span><br></pre></td></tr></table></figure><ol start="3"><li>串比较</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lea edi [   ] ;edi指向字符串a</span><br><span class="line">lea esi [   ] ;....</span><br><span class="line">repz cmpsd    ;比较</span><br></pre></td></tr></table></figure><p>edi、esi：变址寄存器，存放存储单元在段内的偏移量。<br />rep：按ecx中指定次数或在zf不满足条件前重复。<br />如果ds:si和es:di所指向的两个字节相等，则继续比较。REP（重复）、REPE（相等时重复）、REPNE（不相等时重复）、REPZ（为零时重复）及 REPNZ（不为零时重复）<br /><img src="https://s1.ax1x.com/2020/04/02/GGvR3D.png" alt=" " /><br />CMPSB比较字节  CMPSW比较字  CMPSD比较双字  ,方向标志位决定ESI和EDI的增加或减少</p><h1 id="警告窗口"><a class="markdownIt-Anchor" href="#警告窗口"></a> 警告窗口</h1><p>常用的方法是修改程序的资源、静态分析、动态分析<br />显示窗口的常用函数有MessageBoxA(W)、MessageBoxExA(W)、DialogBoxParamA(W)、ShowWindow、CreateWindowExA(W)等，对某些警告窗口无效时可以尝试利用消息设置断点拦截</p><h1 id="时间限制"><a class="markdownIt-Anchor" href="#时间限制"></a> 时间限制</h1><h2 id="计时器"><a class="markdownIt-Anchor" href="#计时器"></a> 计时器</h2><p>对于限制每次运行时长的软件</p><ol><li>setTimer函数<br />应用程序在初始化时调用这个api函数，申请计时器并设定时间间隔，同时获得一个处理计时器超时的回调函数。若超时，系统会向申请的窗口发送WM_TIMER或调用那个回调函数。当程序不需要计时器，调用KillTimer()进行销毁</li><li>高精度多媒体计时器<br />调用timeSetEvent()</li><li>其它<br />timeGetTime()、GetTickCount()，返回的都是系统启动以来经历过的时间，函数的精度取决于系统的设置；也可以利用各高级语言开发库里的函数实现计时，如c语言里的time()（返回1970.01.01 0时起至今的秒数）</li></ol><p>精度太高会对系统性能造成影响，故一般不需要太高精度。</p><h2 id="时间限制-2"><a class="markdownIt-Anchor" href="#时间限制-2"></a> 时间限制</h2><p>试用期<br />在安装软件或主程序第一次运行时获得系统日期并记录。程序每次运行都要去的当前系统日期并与之前的记录比较<br />软件一般最少要保存两个时间值，一个是安装（运行）日期（最好存在多个地方），一个是软件最近一次运行的日期（防止用户修改机器日期）<br />用于获取时间的api函数有GetSystemTime、GetLocalTime、GetFileTime，即使不直接使用这些函数，高级语言中封装的类也调用了这些函数。<br />还有一种方法是读取需要频繁修改的系统文件，利用FileTimeToSystem()</p><h1 id="面向对象oop涉及到的几个名词"><a class="markdownIt-Anchor" href="#面向对象oop涉及到的几个名词"></a> 面向对象（OOP）涉及到的几个名词</h1><p>主要是因为加密与解密里涉及到了（如虚函数）但不懂是啥．．．．</p><h2 id="类class对象"><a class="markdownIt-Anchor" href="#类class对象"></a> 类（class）&amp;对象</h2><p>类是用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例<br />当我们定义一个class的时候，我们实际上就定义了一种数据类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 构造函数定义</span></span><br><span class="line">      Box(<span class="keyword">double</span> l=<span class="number">2.0</span>, <span class="keyword">double</span> b=<span class="number">2.0</span>, <span class="keyword">double</span> h=<span class="number">2.0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt;<span class="string">"Constructor called."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">         length = l;</span><br><span class="line">         breadth = b;</span><br><span class="line">         <span class="built_in">height</span> = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">Volume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * <span class="built_in">height</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(Box box)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>-&gt;Volume() &gt; box.Volume();</span><br><span class="line">         <span class="comment">// 每一个对象都能通过this 指针访问自己的地址</span></span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span>:             <span class="comment">//类成员的属性，还可为private 或 protected</span></span><br><span class="line">      <span class="keyword">double</span> length;   <span class="comment">// 盒子的长度</span></span><br><span class="line">      <span class="keyword">double</span> breadth;  <span class="comment">// 盒子的宽度</span></span><br><span class="line">      <span class="keyword">double</span> <span class="built_in">height</span>;   <span class="comment">// 盒子的高度</span></span><br><span class="line">&#125;;</span><br><span class="line">Box Box1;          <span class="comment">// 声明对象 Box1，类型为 Box</span></span><br><span class="line">Box Box2;          <span class="comment">// 声明对象 Box2，类型为 Box</span></span><br><span class="line">```  </span><br><span class="line">构造函数：实现对象初始化  </span><br><span class="line">析构函数：释放对象占用的内存空间  </span><br><span class="line">类的作用：安全、继承  </span><br><span class="line"></span><br><span class="line">## 继承</span><br><span class="line"></span><br><span class="line">面向对象程序设计中最重要的一个概念是继承。继承允许我们依据一个类来定义另一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到了重用代码功能和提高执行效率的效果。  </span><br><span class="line">当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为基类、父类或超类，新建的类称为派生类或子类。  </span><br><span class="line">继承代表了 is a 关系。例如，哺乳动物是动物，狗是哺乳动物。  </span><br><span class="line">如果一个实例的数据类型是某个子类，那么它的数据类型也可以看作是父类  </span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="built_in">width</span> = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="built_in">height</span> = h;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="keyword">int</span> <span class="built_in">width</span>;</span><br><span class="line">      <span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaintCost</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getCost</span><span class="params">(<span class="keyword">int</span> area)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> area * <span class="number">70</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> (<span class="built_in">width</span> * <span class="built_in">height</span>); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//多继承，即一个子类可以有多个父类，它继承了多个父类的特性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape, <span class="keyword">public</span> PaintCost</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getwhatever</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> (<span class="built_in">width</span> * <span class="built_in">height</span> *<span class="built_in">height</span>); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="多态"><a class="markdownIt-Anchor" href="#多态"></a> 多态</h2><p>多态按字面的意思就是多种形态。存在的必要条件：继承、重写（子类对父类的方法做一定修改）、父类引用指向子类的对象<br />当子类和父类都存在相同的方法时，子类覆盖了父类的方法</p><blockquote><p>对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。<a href="https://www.liaoxuefeng.com/wiki/897692888725344/923030507728352" target="_blank" rel="noopener">继承和多态</a></p></blockquote><h2 id="虚函数-2"><a class="markdownIt-Anchor" href="#虚函数-2"></a> 虚函数</h2><p>C++中的虚函数的作用主要是实现了多态的机制。基类定义虚函数，子类可以重写该函数；在派生类中对基类定义的虚函数进行重写时，需要在派生类中声明该方法为虚方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span>        </span></span><br><span class="line"><span class="function">    <span class="comment">//这里的foo()也可以啥都不输出，即virtual void foo();</span></span></span><br><span class="line"><span class="function">    <span class="comment">//如果写为virtual void foo()=0 则为一个纯虚函数，仅提供一个接口，在继承时必须实现</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"A::foo() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"B::foo() is called"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A *a = <span class="keyword">new</span> B();</span><br><span class="line">    a-&gt;foo();   <span class="comment">// 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有纯虚函数的类称为抽象类，只能作为基类，且不能定义对象（抽象类这边还涉及到了abstract和virtual，但先不管了…）</p><h3 id="虚函数表"><a class="markdownIt-Anchor" href="#虚函数表"></a> 虚函数表</h3><p>编译器处理虚函数的方法是：为每个类对象添加一个隐藏成员，隐藏成员中保存了一个指向函数地址数组的指针，称为虚表指针，这种数组成为虚函数表。即，每个类使用一个虚函数表，每个类对象用一个虚表指针。</p><h2 id="封装"><a class="markdownIt-Anchor" href="#封装"></a> 封装</h2><p>把数据和函数捆绑在一起。<br />通过创建类来进行封装和数据隐藏（public、protected、private）。默认情况下，类中定义的项目都是私有的，再提供对外public的接口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span>&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// 构造函数</span></span><br><span class="line">      Adder(<span class="keyword">int</span> i = <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        total = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对外的接口</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          total += number;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对外的接口</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> total;</span><br><span class="line">      &#125;;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="comment">// 对外隐藏的数据</span></span><br><span class="line">      <span class="keyword">int</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="python-爬虫学习"><a class="markdownIt-Anchor" href="#python-爬虫学习"></a> python 爬虫学习</h1><p><a href="https://brubbish.github.io/710f8e5f.html#RE%E5%BA%93%E7%9A%84match%E5%AF%B9%E8%B1%A1">https://brubbish.github.io/710f8e5f.html#RE库的match对象</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于上周博客炸了的问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于上周博客炸了的问题&quot;&gt;&lt;/a&gt; 关于上周博客炸了的问题&lt;/h1&gt;
&lt;p&gt;原因是两个_config.yml（可能还有其他文件吧）里所有缩进都不见了…不知道是为啥，就
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2020.03.16-2020.03.22</title>
    <link href="https://brubbish.github.io/dcd92ddb.html"/>
    <id>https://brubbish.github.io/dcd92ddb.html</id>
    <published>2020-03-22T04:57:00.000Z</published>
    <updated>2020-03-22T09:53:59.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="32位软件逆向技术"><a class="markdownIt-Anchor" href="#32位软件逆向技术"></a> 32位软件逆向技术</h1><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><p>计算机存储、组织数据的方式。确定数据结构后，算法就很容易得到，有时候也根据特定算法来判断数据结构</p><h3 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h3><p>局部变量分配空间时通常会使用栈和寄存器</p><h4 id="利用栈存放局部变量"><a class="markdownIt-Anchor" href="#利用栈存放局部变量"></a> 利用栈存放局部变量</h4><p>变量分配与清除的形式：</p><ol><li></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sub esp,n</span><br><span class="line">...用[ebp-xxxx]寻址</span><br><span class="line">add esp,n</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add esp,-n</span><br><span class="line">...用[ebp+xxxx]寻址</span><br><span class="line">sub esp,-n</span><br></pre></td></tr></table></figure><ol start="3"><li>(省空间)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push reg  ;(相当于sub esp，4)</span><br><span class="line">...用[ebp-xxxx]寻址</span><br><span class="line">pop reg</span><br></pre></td></tr></table></figure><p>局部变量的起始值是随机的，是其他函数执行后留在栈中的垃圾数据，因此需要进行初始化，一种方法是通过mov指令，另一种是用push，如：“push 5”</p><h4 id="利用寄存器存放局部变量"><a class="markdownIt-Anchor" href="#利用寄存器存放局部变量"></a> 利用寄存器存放局部变量</h4><p>除了栈占用2个寄存器，编译器会利用其他6个通用寄存器尽可能的存放局部变量，如果寄存器不够用会存到栈中</p><h3 id="全局变量"><a class="markdownIt-Anchor" href="#全局变量"></a> 全局变量</h3><p>全集变量通常位于.data区块的一个固定地址处，访问时一般会用一个固定的硬编码地址直接对内存进行寻址（←使用这种方式比较容易识别出这是一个全局变量。）<br />一般编译器会将<em>全局变量</em>放到<em>可读</em>写的区块里，如果放到<em>只读</em>区块里就是一个<em>常量</em></p><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><p>访问一般时通过基址加变址寻址实现的（基址可以是常量也可以是寄存器）</p><h2 id="虚函数"><a class="markdownIt-Anchor" href="#虚函数"></a> 虚函数</h2><p>虚函数是在程序运行时定义的函数。（c++）<br />虚函数的地址不能在编译时确定，只能在调用即将进行时确定。所有对虚函数的引用通常放在一个专用数组-虚函数表（virtual table）中，数组中的元素存放的就是类中数表的地址。</p><blockquote><p>虚函数 是在基类中使用关键字 virtual 声明的函数。在派生类中重新定义基类中定义的虚函数时，<em>会告诉编译器不要静态链接到该函数</em>。<br />基类：当创建一个类时，您不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为基类，新建的类称为派生类。<br />继承：代表了 is a 关系。例如，哺乳动物是动物，狗是哺乳动物，因此，狗是动物，等等。(<a href="http://runoob.com" target="_blank" rel="noopener">runoob.com</a>)</p></blockquote><p>程序通过两次寻址得到虚函数的地址然后执行</p><h2 id="控制语句"><a class="markdownIt-Anchor" href="#控制语句"></a> 控制语句</h2><h3 id="if-else"><a class="markdownIt-Anchor" href="#if-else"></a> if-else</h3><p>通常为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmp a,b</span><br><span class="line">jz&#x2F;jnz(相当于je&#x2F;jne) xxxx</span><br></pre></td></tr></table></figure><p>整数用cmp指令比较，浮点值用fcom、fcomp等指令比较<br />许多情况下，编译器用test或or之类的较短的逻辑指令来替换cmp指令<br /><img src="https://s1.ax1x.com/2020/03/19/8ssrPP.md.png" alt=" " /></p><h3 id="switch-case"><a class="markdownIt-Anchor" href="#switch-case"></a> switch-case</h3><p>编译器会编译出一组由不同关系运算组成的语句</p><p>如果编译时设置优化选项为“Maximize Speed”，编译器会用&quot;dec eax&quot;代替cmp指令。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">push ecx</span><br><span class="line">lea eax,[esp]</span><br><span class="line">push eax</span><br><span class="line">push 0040804c</span><br><span class="line">call 004010A1   ;scanf</span><br><span class="line">mov eax,[esp+8] ;将输入的值传给eax</span><br><span class="line">add esp,00000008</span><br><span class="line"></span><br><span class="line">dec dax         ;检查eax是否为1h</span><br><span class="line">je 00401055</span><br><span class="line">                ;zf记录相关指令执行后结果是否为0，如果为0那么ZF&#x3D;1，如果不为0那么ZF&#x3D;0</span><br><span class="line">                ;je:等于则转移(检测zf&#x3D;1) </span><br><span class="line"></span><br><span class="line">(同理也可使用sub eax,xxxxxx判断是否为其他值)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="转移指令机器码的计算"><a class="markdownIt-Anchor" href="#转移指令机器码的计算"></a> 转移指令机器码的计算</h3><p>短转移：无条件和有条件的<em>机器码均为2字节</em>，范围为-128~127（2^8）<br />长转移：无条件的机器码为<u>5字节</u>，条件转移为<u>6字节</u>。因为无条件用一个字节（jmp）表示转移类型；条件转移用2个字节（如je、jns），用其他四个字节表示偏移量<br />子程序调用指令：调用的参数不涉及寄存器、栈等值的类似于长转移；涉及的例如“call dword ptr [eax+2]”  比较复杂，不表（…）<br />条件转移指令的范围是16位遗留下的。<br />cpu开发人员只给目的地址分配了1字节（8位），将跳转的长度限制在225字节之内</p><p>无条件短转移的机器码形式为:“EBxx”。B00H<sub>EB4F是向后转移，EB80</sub>EBFFH是向前转移</p><p>转移指令的机器码形式为：<br />位移量=目的地址-起始地址-跳转指令本身长度<br />转移指令机器码=转移类别机器码(如前文中的EB）+位移量</p><blockquote><p><a href="https://brubbish.github.io/34199.html#%E6%A0%B9%E6%8D%AE%E4%BD%8D%E7%A7%BB%E8%BF%9B%E8%A1%8C%E8%BD%AC%E7%A7%BB%E7%9A%84%E6%84%8F%E4%B9%89">https://brubbish.github.io/34199.html#根据位移进行转移的意义</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/03/21/8fFC6O.png" alt="jmp 401005对应机器码EB03" /></p><h1 id="python爬虫学习"><a class="markdownIt-Anchor" href="#python爬虫学习"></a> python爬虫学习</h1><p>记录的有点乱，还没整理好<br />学习的原因是 看了某个论坛上一个学了几周爬虫 后用其爬的结果回答的答主 遂感牛逼，再加上有时候想学点别的作为调节（🤦‍）<br /><a href="https://brubbish.github.io/710f8e5f.html">https://brubbish.github.io/710f8e5f.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;32位软件逆向技术&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#32位软件逆向技术&quot;&gt;&lt;/a&gt; 32位软件逆向技术&lt;/h1&gt;
&lt;h2 id=&quot;数据结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据结构
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2020.03.08-2020.03.15</title>
    <link href="https://brubbish.github.io/232092d7.html"/>
    <id>https://brubbish.github.io/232092d7.html</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-04-07T03:39:58.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ida"><a class="markdownIt-Anchor" href="#ida"></a> IDA</h1><h2 id="枚举"><a class="markdownIt-Anchor" href="#枚举"></a> 枚举</h2><p>‘View’-&gt;‘Open subviews’-&gt;‘Enumerations’ 打开枚举窗口，按’Insert’插入新的枚举类型，按’N’添加成员<br />选中需要重新定义的数据，按’M’后将其转换<br /><img src="https://s1.ax1x.com/2020/03/12/8etGNT.md.png" alt="8etGNT.md.png" /></p><p><img src="https://s1.ax1x.com/2020/03/12/8etJ4U.md.png" alt="8etJ4U.md.png" /></p><h2 id="flirt"><a class="markdownIt-Anchor" href="#flirt"></a> FLIRT</h2><p>库文件快速识别与鉴定技术<br />在一系列编译器的标准库文件里自动找出调用的函数，如，把’call 406E40’识别为’call strlen’<br />如果没有自动识别出来，可以强制使用编译器特征文件（xxxx.sig）<br />‘View’-&gt;‘Open subviews’-&gt;'Signatures’或’Shift+F5’打开签名窗口，右键’Apply new signature’选择签名文件</p><h2 id="不知道把这部分叫作啥"><a class="markdownIt-Anchor" href="#不知道把这部分叫作啥"></a> （不知道把这部分叫作啥）</h2><ol><li></li></ol><p><img src="https://s1.ax1x.com/2020/03/12/8eOmin.md.png" alt="可见，可以把004010c9的内容改了让程序显示'OK'" /></p><p><img src="https://s1.ax1x.com/2020/03/14/8lFm6K.png" alt="Assmeble修改汇编指令，Apply patches to input file...将修改保存到文件" /><br />2.<br />输入输出等函数可在name窗口中查看</p><h1 id="32位软件逆向技术"><a class="markdownIt-Anchor" href="#32位软件逆向技术"></a> 32位软件逆向技术</h1><h2 id="启动函数"><a class="markdownIt-Anchor" href="#启动函数"></a> 启动函数</h2><p>Windows程序执行并不是由WinMain函数开始的，首先执行的是启动函数的相关代码（由编译器生成），完成后才调用WinMain函数</p><p>c/c++程序的启动函数作用基本相同，包括 检索指向新进程的<u>命令行</u>指针、检索指向新进程的<u>环境变量</u>指针、全局变量初始化和内存栈初始化等</p><p><img src="https://s1.ax1x.com/2020/03/12/8maVFP.md.png" alt="某程序启动代码（部分）" /><br />分析程序的过程中可以略过启动代码，直接将重点放到WinMain函数上</p><h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2><p>通过call…ret把函数调用和其他跳转指令区别开<br />直接调用：call <u>函数首地址</u><br />间接调用：call [<u> eax </u>] (通过寄存器传递函数地址或动态计算函数地址)</p><h3 id="函数的参数"><a class="markdownIt-Anchor" href="#函数的参数"></a> 函数的参数</h3><p>函数传递参数有3种方式：栈方式、寄存器方式、通过全局变量进行隐含参数传递方式<br />每一种机制与使用的编译语言有关</p><h4 id="利用栈传递参数"><a class="markdownIt-Anchor" href="#利用栈传递参数"></a> 利用栈传递参数</h4><p>函数计算结束后，由调用者或函数本身修改栈，使栈恢复原样（<strong>平衡栈数据</strong>）<br />调用约定：为了实现函数调用而建立的协议（按照什么顺序入栈；由谁来平衡栈…）</p><ol><li>c规范(__cdecl)函数按照从右到左的顺序入栈，由调用者负责清除栈（c/c++/mfc(微软基础类库)默认调用约定）</li><li>stdcall调用约定按照从右到左传递参数，并由调用的函数在返回前清理传送参数的内存栈</li><li>stdcall调用约定是Win32 API采用的约定方式，在Win32 API种也有一些函数采用(__cdecl)调用，如wsprintf</li></ol><p>c、c++、pascal 等高级语言的子程序执行过程基本相似：</p><ol><li>调用者将函数执行完毕时应返回的地址和参数压入栈</li><li>子程序通过’ebp 指针+偏移量’对栈中的操作进行寻址</li><li>子程序使用ret或retf返回，此时cpu将eip置为栈中保存的地址</li></ol><p>栈的操作对象只能是双操作数（占4个字节）<br /><img src="https://s1.ax1x.com/2020/03/14/8lP1De.md.png" alt="一个凑行数的图" /></p><p>用ebp存取栈<br />用ret平衡栈时，在ret指令后加一个操作数，表示在ret指令后给esp加上操作数  如’ret 8’相当于在返回后将esp+8，ret后面的值等于参数个数*4h</p><p>enter 和 leave指令可以帮助进行栈的维护</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">enter xxxx,0   ;0表示创建xxxx大小的空间来放置局部变量</span><br><span class="line">....</span><br><span class="line">leave </span><br><span class="line">ret 8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enter的作用为：</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,xxxx</span><br><span class="line"></span><br><span class="line">leave的作用为：</span><br><span class="line">add esp,xxxx</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure><blockquote><p>ENTER 有两个操作数：第一个是常数，定义为局部变量保存的堆栈空间字节数；第二个定义了过程的词法嵌套级。<br />ENTER numbytes, nestinglevel<br />Numbytes 总是向上舍入为 4 的倍数，以便 ESP 对齐双字边界。Nestinglevel 确定了从主调过程堆栈帧复制到当前帧的堆栈帧指针的个数。</p></blockquote><h4 id="利用寄存器传递参数"><a class="markdownIt-Anchor" href="#利用寄存器传递参数"></a> 利用寄存器传递参数</h4><p>绝大多数编译器都遵循fastcall规范<br />不同的编译器实现的fastcall稍有不同</p><h4 id="名称修饰约定"><a class="markdownIt-Anchor" href="#名称修饰约定"></a> 名称修饰约定</h4><p>c<ins>编译器会按照某种规则改写每一个入口点的符号名，从而允许同一个名字有多个用法且不破坏链接器。这种技术称为名称改编或名称修饰<br />在vc</ins>种，函数修饰名由编译类型(c/c++)、函数名、类（class）名、调用约定、返回类型等决定<br /><img src="https://s1.ax1x.com/2020/03/15/83ZkQA.png" alt="常见的c和c++编译函数名的修饰" /></p><h3 id="函数的返回值"><a class="markdownIt-Anchor" href="#函数的返回值"></a> 函数的返回值</h3><p>最常见的是return操作符，还有通过参数 按 传引用方式 返回值、通过全局变量返回值</p><h4 id="用return操作符返回值"><a class="markdownIt-Anchor" href="#用return操作符返回值"></a> 用return操作符返回值</h4><p>一般情况下返回值放在eax中，如果超过大小，高32位就会放在edx<br />对于一个返回两个参数和的子函数：<br /><img src="https://s1.ax1x.com/2020/03/15/83eB4S.png" alt="圈起来的即为存放返回值的过程" /><br />对应c语言代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp=x+y;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过参数按传引用方式返回值"><a class="markdownIt-Anchor" href="#通过参数按传引用方式返回值"></a> 通过参数按传引用方式返回值</h3><p>传递参数的方式有：传值和传引用<br />传值调用时会建立参数的一份复本，并把它传给调用参数<br />传引用允许调用函数修改原始变量的值（指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(*a&lt;*b)</span><br><span class="line">        *a=*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/15/83uRHI.png" alt=" " /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ida&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ida&quot;&gt;&lt;/a&gt; IDA&lt;/h1&gt;
&lt;h2 id=&quot;枚举&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#枚举&quot;&gt;&lt;/a&gt; 枚举&lt;/h2&gt;
&lt;p&gt;‘Vie
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2020.03.02-2020.03.08</title>
    <link href="https://brubbish.github.io/2f00783a.html"/>
    <id>https://brubbish.github.io/2f00783a.html</id>
    <published>2020-03-07T16:00:00.000Z</published>
    <updated>2020-03-22T05:14:23.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ida"><a class="markdownIt-Anchor" href="#ida"></a> IDA</h1><h2 id="四个快捷键"><a class="markdownIt-Anchor" href="#四个快捷键"></a> 四个快捷键</h2><p>添加注释：冒号或分号<br />跳转到某个地址（16进制）：‘G’;返回（后退）：‘Esc’;前进：‘Ctrl+Enter’</p><h2 id="交叉参考"><a class="markdownIt-Anchor" href="#交叉参考"></a> 交叉参考</h2><p>可以知道指令代码相互调用的关系<br /><img src="https://s2.ax1x.com/2020/03/02/3RV2Ox.md.png" alt=" " /><br />'↑j’中j表示跳转，o表示偏移量，p表示子程序，双击或按回车可以跳到调用该处的地方<br />在‘loc_xxxxx’上按’x’打开交叉参考窗口</p><h2 id="参考重命名"><a class="markdownIt-Anchor" href="#参考重命名"></a> 参考重命名</h2><p>可把所有 loc_xxxxxx 重命名<br /><img src="https://s2.ax1x.com/2020/03/02/3Ru4WF.png" alt=" " /></p><h2 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2><p>打开标记当前位置功能：‘jump’-&gt;‘mark position’  快捷键:‘Alt+M’<br />标记后在其他位置可以跳转到标记时光标的位置，快捷键：‘Ctrl+M’</p><p><img src="https://s2.ax1x.com/2020/03/05/3TRn9e.png" alt=" " /><br /><img src="https://s2.ax1x.com/2020/03/05/3TRVAK.png" alt=" " /></p><h2 id="格式化指令操作数"><a class="markdownIt-Anchor" href="#格式化指令操作数"></a> 格式化指令操作数</h2><p>把常量转换为十六、十、八、二进制<br /><img src="https://s2.ax1x.com/2020/03/05/3TRehD.png" alt=" " /></p><h2 id="函数的操作"><a class="markdownIt-Anchor" href="#函数的操作"></a> 函数的操作</h2><h2 id="代码和数据转换"><a class="markdownIt-Anchor" href="#代码和数据转换"></a> 代码和数据转换</h2><p>IDA可能无法正确区分数据字节和代码字节，有些程序利用这一点对抗静态反汇编<br />用户可以将某段数据指定为代码或数据<br />方法：‘Edit’-&gt;‘Code’/‘Data’(快捷键’C’/‘D’)，'D’会将数据类型在db，dw，dd之间转换<br />按’U’取消定义后得到一些可以重新定义的字节，按’P’将某段代码定义为子程序<br /><img src="https://s2.ax1x.com/2020/03/05/3TRZtO.png" alt=" " /><br />—&gt;<br /><img src="https://s2.ax1x.com/2020/03/05/3TRk0x.md.png" alt="按'c'结果如图" /></p><h2 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h2><p>编程语言的不同造成字符串格式不同<br />c语言字符串以0结尾，dos字符串以$结尾,其他可见于’Edit’-&gt;‘string’<br /><img src="https://s2.ax1x.com/2020/03/05/3T7bP1.png" alt="3T7bP1.png" /><br />按’A’生成一个变量名，按’U’恢复，在’View’-&gt;‘Open subviews’-&gt;'Names’可以看到字符串变量</p><h2 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2><p>可以将数据按数组的形式显示<br /><img src="https://s2.ax1x.com/2020/03/06/3bDXcR.png" alt="未识别的数组" /><br />‘Edit’-&gt;‘Array’或’ * '打开数组排列调整窗口<br /><img src="https://s2.ax1x.com/2020/03/06/3b6yKs.png" alt="调整数组大小、每行项数（0自动调整）、对齐方式（0自动调整）" /><br /><img src="https://s2.ax1x.com/2020/03/06/3bDO39.png" alt="设置为'3 0 -1'的结果" /></p><h2 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h2><p>对一些常见的文件类型，IDA会自动加载相应的类型库，这些类型库中有相应的结构体。<br />‘Shift+F11’打开加载类型库窗口（Loaded Type Libarries)，右键’Load Type Libarary’，'Insert’添加类型库</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************</span></span><br><span class="line"><span class="comment">*程序:Structures.cpp                                                                                      *</span></span><br><span class="line"><span class="comment">*用途:IDA结构体反汇编                                                                        *</span></span><br><span class="line"><span class="comment">*   看雪软件安全网站                                                                              *   </span></span><br><span class="line"><span class="comment">*    www.pediy.com, kanxue 2002.8                                                                 *</span></span><br><span class="line"><span class="comment">********************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>[2]=&#123;</span>&#123;<span class="number">01</span>,<span class="string">"Mary"</span>,<span class="number">14</span>&#125;,&#123;<span class="number">02</span>,<span class="string">"Angela"</span>,<span class="number">15</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">for</span>(p=stu;p&lt;stu+<span class="number">2</span>;p++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%5d  %-20s%4d\n"</span>,p-&gt;id,p-&gt;name,p-&gt;age);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/06/3LK7fU.png" alt="对应了main()里的内容，结构体存在“unk_407030”那块" /></p><p><img src="https://s2.ax1x.com/2020/03/06/3Lu7Md.md.png" alt="没有定义结构体时自动生成" /><br />如[esi+18h]调用了结构体中的数据，可用有意义的名字代替<br />先把结构体数据中的数据重新定义<br /><img src="https://s2.ax1x.com/2020/03/06/3LQWaq.md.png" alt="参考数组、字符串、数据类型" /><br />打开结构体窗口，insert一个结构类型。按’d’添加数据/切换数据类型，按’a’切换为字符串，按’n’修改结构体成员的名字<br /><img src="https://s2.ax1x.com/2020/03/07/3OW2SP.png" alt=" " /><br />将光标定位在相应地址处，'Edit-&gt;‘Struct var’选择相应结构体类型<br /><img src="https://s2.ax1x.com/2020/03/07/3OfiSx.png" alt="调整后" /><br />按’T’，在操作数类型中重新定义现有数据：<br /><img src="https://s2.ax1x.com/2020/03/07/3OzPyD.png" alt=" " /><br />选择一片代码后可以批量进行替换：<br /><img src="https://s2.ax1x.com/2020/03/07/3X9BnS.png" alt="" /><br /><em>lea：</em><br /><em>lea bx，data</em><br /><em>lea是load effective address 的缩写，是取源操作数的偏移地址，并将其传送到目的操作数单元。类似于C语言的取地址符&amp;。</em><br /><em>lea eax,[eax+2</em>eax]的效果是eax = eax + eax * 2*<br /><em>mov edx,[ebp+16]的效果是edx=(dword)(ebp+16).</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ida&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ida&quot;&gt;&lt;/a&gt; IDA&lt;/h1&gt;
&lt;h2 id=&quot;四个快捷键&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#四个快捷键&quot;&gt;&lt;/a&gt; 四个快捷键&lt;/h2
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2020.02.24-2020.03.01</title>
    <link href="https://brubbish.github.io/9fec375a.html"/>
    <id>https://brubbish.github.io/9fec375a.html</id>
    <published>2020-02-24T07:40:38.000Z</published>
    <updated>2020-03-30T05:28:31.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ollydbg-学习"><a class="markdownIt-Anchor" href="#ollydbg-学习"></a> OllyDbg 学习</h1><h2 id="常用断点"><a class="markdownIt-Anchor" href="#常用断点"></a> 常用断点</h2><h3 id="intinterrupt-3断点"><a class="markdownIt-Anchor" href="#intinterrupt-3断点"></a> int(interrupt) 3断点</h3><p>在OD中用’F2’来设置，机器码是0xCC<br />执行一个int 3断点时，该地址处的指令首字节修改位CC（OD显示的还是原来的指令）</p><p>优点是可以设置无数个指令，缺点是<strong>改变了原程序机器码，容易被软件检测到</strong>，例如有些软件会检测api的首地址是否为0xCC</p><h3 id="硬件断点"><a class="markdownIt-Anchor" href="#硬件断点"></a> 硬件断点</h3><p>和DRx调试寄存器有关<br />DRx调试器共有8个（x从0 ~ 7）</p><p><img src="https://s2.ax1x.com/2020/02/24/3G1qVf.png" alt=" " /></p><p>0 ~ 3：调试地址寄存器，用于保存需要监视的地址，例如设置硬件断点<br />4、5：（先不做了解）<br />6：调试寄存器组状态寄存器（‘这个寄存器主要是在调试异常产生后，报告产生调试异常的相关信息’)<br />7：调试寄存器组控制寄存器，控制调试<br />硬件断点的原理是使用DR0、DR1、DR2、DR3设定地址，并用DR7设定状态，因此最多设置4个断点<br />设置方法为：1.在代码行单击右键，执行’断点’-&gt;‘硬件执行 2.在数据窗口’右键’-&gt;‘硬件访问断点’-&gt;（选择数据长度1/2/4字节），如4字节（Dword)当访问xxxxx0~xxxxx3的内存时会被断下</p><p>快捷键’F4’执行到光标所在的行</p><h3 id="内存断点"><a class="markdownIt-Anchor" href="#内存断点"></a> 内存断点</h3><p>原理是对所设的地址赋予不可访问/不可写属性，当访问/写入的时候就会产生异常，OD比较异常地址是不是断点地址，如果是就中断<br />设置内存断点在每次出现异常时都需要比较来判断是否应该中断，所以会降低OD的执行速度<br />OD只能下一个内存断点，设置方法为：在数据/代码窗口选中要下断点的地址区域，右键执行’断点’-&gt;‘内存写入’<br />硬件访问/写入断点实在触发硬件断点的下一条指令处下断；内存断点是在触发断点的指令处下断。<br />内存断点不修改原始代码，不会因为被程序校验而失败</p><h3 id="内存访问一次性断点"><a class="markdownIt-Anchor" href="#内存访问一次性断点"></a> 内存访问一次性断点</h3><p>windows 对内存使用段页式的管理方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(quote):</span><br><span class="line">段页式存储管理方式即先将用户程序分成若干个段，再把每个段分成若干个页，并为每一个段赋予一个段名。</span><br><span class="line">（基本分段存储管理方式和基本分页存储管理方式原理的结合）</span><br></pre></td></tr></table></figure><p>快捷键’Alt+M’显示内存，可以看到许多段，每个段都有不可访问、读、写、执行属性<br />可用’F2’对整个段设置断点。当所在段被读取或执行时，中断发生，断点删除。</p><h3 id="消息断点"><a class="markdownIt-Anchor" href="#消息断点"></a> 消息断点</h3><p>当某个特定窗口函数接收到某个特定消息时，消息断点将使程序中断<br />消息断点与INT 3断点的区别在于：INT 3 断点可以在程序启动之前设置，消息断点<strong>只有在窗口被创建后才能设置</strong></p><p>当用户点击按钮、移动光标、输入文字时，一条消息就会发送给当前窗体。发送的信息有4个参数：1个窗口句柄，1个消息编号，2个32位长的参数。<br />设置方法：工具栏中的’w’按钮，在条目上单击右键…。</p><p>ps：<em>当单击按钮并松开时会发送’WM_LBUTTONUP’这个消息。</em></p><h3 id="条件断点"><a class="markdownIt-Anchor" href="#条件断点"></a> 条件断点</h3><p>在满足一定条件时才会中断。OD中可以按寄存器、储存器、消息等设断点。<br />用带有条件表达式的INT 3 断点，当调试器遇到断点时，计算表达式的值，如果表达式有效则断点生效。</p><ol><li>按寄存器条件中断<br />快捷键’Shift+F2’ 条件表达式例如：  eax==0400000</li><li>按存储器条件中断<br /><em>（CreateFileA函数用于打开文件，可对其设断）</em><br />在栈窗口右键，执行’Address’-&gt;'Relative to ESP’可看到各个参数相对于当前ESP的地址，如果要得到第一个参数的地址，可以用[ESP+4],如果要得到指向的字符串，使用[[ESP+4]],表达式可用：[STRING [ESP+4]]==&quot;…&quot;(STRING前缀是“以0结尾的ASCII字符串”,还有UNICODE前缀等)</li></ol><h3 id="条件记录断点"><a class="markdownIt-Anchor" href="#条件记录断点"></a> 条件记录断点</h3><p>可以记录断点处函数表达式或参数的值，也可以设置断点次数，每次符合条件暂停后计数值-1<br />快捷键’Shift+F4’打开条件记录窗口<br />条件记录断点可以向插件传递多个命令</p><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><p>OD只能加载32个插件<br />添加插件可通过将插件复制到’plugin’文件夹中</p><h2 id="run-trace"><a class="markdownIt-Anchor" href="#run-trace"></a> Run trace</h2><p>把程序执行过的指令保存下来。<br />将地址、寄存器等记录到Run tarce 缓冲区中。如果缓冲区太小可能造成缓冲区溢出，OD会自动丢弃旧记录。<br />数据可以在’查看’-&gt;‘RUN跟踪’里（或按’…’）查看。使用’+‘和’-'浏览程序执行路线</p><h2 id="hit-trace"><a class="markdownIt-Anchor" href="#hit-trace"></a> Hit trace</h2><p>分辨哪一部分代码被执行了，哪一部分没有执行。在遇到一段跳转分支比较多的代码，需要了解程序执行路线时，可以用Hit trace。<br />选中代码-&gt;右键-&gt;‘Hit trace’-&gt;‘Add selection’<br />效果是执行过的指令前为红色，未执行的为蓝色：<br /><img src="https://s2.ax1x.com/2020/02/28/3D6OqU.png" alt="" /></p><p>ps：<strong>不要在监视的代码中设置断点</strong></p><h2 id="od常见问题"><a class="markdownIt-Anchor" href="#od常见问题"></a> OD常见问题</h2><h3 id="乱码"><a class="markdownIt-Anchor" href="#乱码"></a> 乱码</h3><ol><li>右键’分析’-&gt;‘分析代码’或快捷键’Ctrl+A’</li><li>右键’分析’-&gt;‘从模块中删除分析’，或在udd文件夹中删除相应文件</li></ol><h3 id="在反汇编窗口输入push-e000不能正确识别"><a class="markdownIt-Anchor" href="#在反汇编窗口输入push-e000不能正确识别"></a> 在反汇编窗口输入’push E000’不能正确识别</h3><p>改为’push 0E000’</p><h3 id="od假死"><a class="markdownIt-Anchor" href="#od假死"></a> od’假死’</h3><p>可能在调试加壳程序时产生<br />打开’ollydbg.ini’设置’Restore windows 0’</p><h1 id="静态分析技术"><a class="markdownIt-Anchor" href="#静态分析技术"></a> 静态分析技术</h1><p>用高级语言写的程序有两种形式。</p><ol><li>程序被编译成机器语言在cpu上执行<br />对于这种程序，可以将机器语言转化为汇编语言，这个过程称为<strong>反汇编</strong></li><li>边解释边执行（编写这种程序的语言称为解释性语言，如java）<br />这种语言编译程序后可以被还原成高级语言的原始结构，这个过程被称为<strong>反编译</strong></li></ol><p>静态分析：通过反编译、反汇编获得程序的汇编代码或源代码，然后分析流程，了解模块的功能</p><h2 id="文件类型分析"><a class="markdownIt-Anchor" href="#文件类型分析"></a> 文件类型分析</h2><p>逆向分析程序的第一步<br />了解编写程序的语言、编译的编译器或是否被加密<br />各种开发语言都有固定的启动代码，被加密程序处理过的程序中会留下加密软件的相关信息<br />但有些外壳程序会将一些加壳信息去除，并伪造启动代码，从而欺骗了PEiD等检测分析软件。因此识别工具给出的结果只能作为参考</p><h2 id="ida"><a class="markdownIt-Anchor" href="#ida"></a> IDA</h2><p>ida 是按区块装载pe文件的，例如.text代码块、.data数据块、.rsrc资源块、.idata输入表、.edata输出表。<br />反编译过程分为两个阶段：</p><ol><li>将代码和数据分开，分析函数的参数调用、跳转等</li><li>装载对应的编译器特征文件，给各个函数赋名</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ollydbg-学习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ollydbg-学习&quot;&gt;&lt;/a&gt; OllyDbg 学习&lt;/h1&gt;
&lt;h2 id=&quot;常用断点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>课设-药店管理系统</title>
    <link href="https://brubbish.github.io/13498.html"/>
    <id>https://brubbish.github.io/13498.html</id>
    <published>2020-02-23T11:33:22.000Z</published>
    <updated>2020-03-30T05:28:40.672Z</updated>
    
    <content type="html"><![CDATA[<p>（为了避免又发生某种奇怪的错误导致程序突然变成了前几个小时保存的版本，还是做完后把它弄到这来好了）<br />一个功能简单的管理系统，包含了menu()里的功能以及登录、注册和称不上加密的加密</p><p>尝试使用了system(“pause”)、system(“cls”)以及把黑框弄成白框的system(“color 70”)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">用于测试数据： </span></span><br><span class="line"><span class="comment">1234 哇 123 处 2000 2029 10</span></span><br><span class="line"><span class="comment">2344 吃 232 非 1234 2099 1</span></span><br><span class="line"><span class="comment">1233 啊 1234 非 2019 2020 2</span></span><br><span class="line"><span class="comment">1239 非 129 处 2001 2021 13</span></span><br><span class="line"><span class="comment">1342 哦哦、 23 处 2011 2022 13</span></span><br><span class="line"><span class="comment">3244 ·· 243 非 2011 2021 2 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">med</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> elecode;<span class="comment">//编码</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];<span class="comment">// 药品名称</span></span><br><span class="line"><span class="keyword">double</span> price;<span class="comment">//价格</span></span><br><span class="line"><span class="keyword">char</span> type[<span class="number">5</span>];<span class="comment">// 药品类型</span></span><br><span class="line"><span class="keyword">int</span> prod;<span class="comment">//生产日期(年)</span></span><br><span class="line"><span class="keyword">int</span> shelf;<span class="comment">//保质期(年)</span></span><br><span class="line"><span class="keyword">int</span> stock;<span class="comment">//库存</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">med</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">med</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"欢迎使用本管理系统\n"</span> </span><br><span class="line"><span class="string">"选择一项功能:\n"</span></span><br><span class="line">       <span class="string">"1.录入信息\n"</span></span><br><span class="line">       <span class="string">"2.打印信息\n"</span></span><br><span class="line">       <span class="string">"3.保存信息\n"</span></span><br><span class="line">       <span class="string">"4.读取信息\n"</span></span><br><span class="line">       <span class="string">"5.统计药品总数\n"</span></span><br><span class="line">       <span class="string">"6.查找符合条件的药品\n"</span></span><br><span class="line">       <span class="string">"7.修改信息\n"</span></span><br><span class="line">       <span class="string">"8.删除信息\n"</span></span><br><span class="line">       <span class="string">"9.退出\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct med *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(struct med *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(struct med *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(struct med *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(struct med *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">user</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">system(<span class="string">"color 70"</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(user()!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">switch</span>(n) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//录入</span></span><br><span class="line">build();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//打印</span></span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//保存</span></span><br><span class="line">save(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//读取</span></span><br><span class="line"><span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//统计人数</span></span><br><span class="line">sum(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//查找</span></span><br><span class="line"><span class="built_in">find</span>(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//修改</span></span><br><span class="line">modify(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:<span class="comment">//删除</span></span><br><span class="line"><span class="built_in">remove</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Wrong num\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"欢迎使用本系统，请先注册或登录：\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1.注册/2.登录："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">char</span> id[<span class="number">10</span>],pass[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入:用户名  密码:  (均只能为小于8位的字母或数字)"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,id,pass);</span><br><span class="line">FILE* fp;</span><br><span class="line">fp = fopen(<span class="string">".\\userinfo.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; id[i]!=<span class="string">'\0'</span>; i++) &#123;</span><br><span class="line">id[i]+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; pass[i]!=<span class="string">'\0'</span>; i++) &#123;</span><br><span class="line">pass[i]+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%s "</span>,id);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%s "</span>,pass);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"保存成功\n"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>) &#123;</span><br><span class="line">FILE *fp;</span><br><span class="line">fp=fopen(<span class="string">".\\userinfo.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(fp==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"还未注册过"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入用户名: "</span>);</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>],b[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; a[i]!=<span class="string">'\0'</span>; i++) &#123;</span><br><span class="line">a[i]+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入密码："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> g=<span class="number">0</span>; g&lt;<span class="number">10</span>; g++) &#123;</span><br><span class="line">b[g]=getch();</span><br><span class="line"><span class="keyword">if</span> (b[g]==<span class="string">'\x0d'</span>) &#123;</span><br><span class="line">b[g]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">b[g]=b[g]+<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,id)==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(id,a)==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,pass);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(pass,b)==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"正在进入管理系统...."</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">med</span> *<span class="title">head</span>=<span class="title">NULL</span>,*<span class="title">nextp</span>;</span></span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">head=p;</span><br><span class="line"><span class="keyword">while</span>(head-&gt;next!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序输入药品的：编码  名称 价格 药品类型（处方药/非处方药） 生产日期（年） 保质期（年） 库存，-1结束\n"</span>);</span><br><span class="line">nextp=(struct med*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct med));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nextp-&gt;elecode);</span><br><span class="line"><span class="keyword">while</span>(nextp-&gt;elecode!=<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %lf %s %d %d %d"</span>,nextp-&gt;name,&amp;nextp-&gt;price,nextp-&gt;type,&amp;nextp-&gt;prod,&amp;nextp-&gt;shelf,&amp;nextp-&gt;stock);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>) &#123;</span><br><span class="line">p=nextp;</span><br><span class="line">head=p;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head-&gt;next=nextp;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">nextp=(struct med*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct med));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nextp-&gt;elecode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"成功录入,按回车返回"</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct med *p)</span> </span>&#123;</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"编码     名称   价格    药品类型 生产日期（年） 保质期（年） 库存\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d     %s     %.2lf %5s %10d %10d %14d\n"</span>,p-&gt;elecode,p-&gt;name,p-&gt;price,p-&gt;type,p-&gt;prod,p-&gt;shelf,p-&gt;stock);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(struct med *p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p) &#123;</span><br><span class="line">sum+=p-&gt;stock;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"药品种类：%d\n药品总量：%d"</span>,i,sum);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合查询：stock&gt;10的</span></span><br><span class="line"><span class="comment">//单项查询：按编码  按价格区间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(struct med *p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"选择查询内容：\n1.库存小于10或可能在一年内过期的药\n2.按编码查询\n3.按价格区间查询\n"</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"今年是__年：    "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"编码     名称   价格    药品类型 生产日期（年） 保质期（年） 库存\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p) &#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;stock&lt;<span class="number">10</span>||p-&gt;shelf-n&lt;<span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d     %s     %.2lf %5s %10d %10d %14d\n"</span>,p-&gt;elecode,p-&gt;name,p-&gt;price,p-&gt;type,p-&gt;prod,p-&gt;shelf,p-&gt;stock);</span><br><span class="line"><span class="comment">//printf("%d %s %lf %s %d %d %d\n",p-&gt;elecode,p-&gt;name,p-&gt;price,p-&gt;type,p-&gt;prod,p-&gt;shelf,p-&gt;stock);</span></span><br><span class="line">p=p-&gt;next; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入编码：   "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"名称   价格    药品类型 生产日期（年） 保质期（年） 库存\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;elecode==n) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s     %.2lf %5s %10d %10d %14d\n"</span>,p-&gt;name,p-&gt;price,p-&gt;type,p-&gt;prod,p-&gt;shelf,p-&gt;stock);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Wrong Number\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span>,<span class="built_in">max</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入最低和最高价格，以空格分开：    "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;<span class="built_in">min</span>,&amp;<span class="built_in">max</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"编码     名称   价格    药品类型 生产日期（年） 保质期（年） 库存\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(p) &#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;price&gt;=<span class="built_in">min</span>&amp;&amp;p-&gt;price&lt;=<span class="built_in">max</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d     %s     %.2lf %5s %10d %10d %14d\n"</span>,p-&gt;elecode,p-&gt;name,p-&gt;price,p-&gt;type,p-&gt;prod,p-&gt;shelf,p-&gt;stock);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"错误的选项\n"</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(struct med *p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入修改药品的编码:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="keyword">while</span>(p) &#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;elecode!=num) &#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"编码错误"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入修改药品信息:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序输入药品的：名称 价格 药品类型（处方药/非处方药） 生产日期（年） 保质期（年） 库存\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %lf %s %d %d %d"</span>,p-&gt;name,&amp;p-&gt;price,p-&gt;type,&amp;p-&gt;prod,&amp;p-&gt;shelf,&amp;p-&gt;stock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"成功修改\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入删除药品编码："</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">med</span> *<span class="title">head</span>,*<span class="title">nextp</span>,*<span class="title">d</span>;</span></span><br><span class="line">head=p;</span><br><span class="line">nextp=p;</span><br><span class="line"><span class="keyword">if</span>(head-&gt;elecode==n) &#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"成功删除"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(head) &#123;</span><br><span class="line"><span class="keyword">if</span>(head-&gt;elecode!=n) &#123;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">nextp=nextp-&gt;next;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"错误编码"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">nextp-&gt;next=head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"成功删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(struct med *p)</span> </span>&#123;</span><br><span class="line">FILE* fp;</span><br><span class="line">fp = fopen(<span class="string">".\\medinfo.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%d %s %.2lf %s %d %d %d\n"</span>,p-&gt;elecode,p-&gt;name,p-&gt;price,p-&gt;type,p-&gt;prod,p-&gt;shelf,p-&gt;stock);</span><br><span class="line"></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"保存成功\n"</span>);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">med</span> *<span class="title">nextp</span>=<span class="title">p</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">while</span>(nextp) &#123;</span><br><span class="line">p=nextp;</span><br><span class="line">nextp=nextp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FILE *fp;</span><br><span class="line">fp=fopen(<span class="string">".\\medinfo.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(fp==<span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"文件无法打开"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">struct med *nextp,*head;</span><br><span class="line">head=<span class="literal">NULL</span>;</span><br><span class="line">nextp=(struct med*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct med));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;elecode)==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,nextp-&gt;name);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%lf"</span>,&amp;nextp-&gt;price);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,&amp;nextp-&gt;type);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;prod);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;shelf);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;stock);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>) &#123;</span><br><span class="line">head=nextp;</span><br><span class="line">p=head;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head-&gt;next=nextp;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">nextp=(struct med*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct med));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">"cls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（为了避免又发生某种奇怪的错误导致程序突然变成了前几个小时保存的版本，还是做完后把它弄到这来好了）&lt;br /&gt;
一个功能简单的管理系统，包含了menu()里的功能以及登录、注册和称不上加密的加密&lt;/p&gt;
&lt;p&gt;尝试使用了system(“pause”)、system(“cls
      
    
    </summary>
    
    
    
      <category term="作业" scheme="https://brubbish.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>2020.02.17-2020.02.23</title>
    <link href="https://brubbish.github.io/12995.html"/>
    <id>https://brubbish.github.io/12995.html</id>
    <published>2020-02-23T01:55:22.000Z</published>
    <updated>2020-04-05T05:58:45.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洛谷"><a class="markdownIt-Anchor" href="#洛谷"></a> 洛谷</h1><h2 id="函数整理"><a class="markdownIt-Anchor" href="#函数整理"></a> 函数整理</h2><h3 id="memset"><a class="markdownIt-Anchor" href="#memset"></a> memset</h3><p>memset(数组名或指针，值，大小)<br />可用于数组初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">....</span><br><span class="line"><span class="keyword">int</span> a[n];</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="sprintf"><a class="markdownIt-Anchor" href="#sprintf"></a> sprintf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(<span class="keyword">char</span> *str, <span class="keyword">char</span> * format [, argument, ...]);</span><br></pre></td></tr></table></figure><p>str为要写入的字符串；format为格式化字符串，与printf()函数相同；argument为变量。<br />可用于把整数搞进字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">"%8x"</span>, <span class="number">4567</span>);  <span class="comment">//小写16进制，宽度占8个位置，右对齐，保存在s中</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">....</span><br><span class="line"><span class="keyword">char</span> a = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">"The ASCII code of a is %d."</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>sprintf不检测数组长度，容易造成缓冲区溢出，可用snprintf()代替</p><h2 id="题"><a class="markdownIt-Anchor" href="#题"></a> 题</h2><h3 id="p1031-均分纸牌"><a class="markdownIt-Anchor" href="#p1031-均分纸牌"></a> P1031 均分纸牌</h3><p><img src="https://s2.ax1x.com/2020/02/23/3llMYn.md.png" alt=" " /></p><p> <br />没啥思路就看了题解:<br /><img src="https://s2.ax1x.com/2020/02/23/3llnoj.png" alt="" /><br />得到代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> a[n];</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">sum=sum/n;</span><br><span class="line">    <span class="comment">//均分过程：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]-sum!=<span class="number">0</span>)&#123;</span><br><span class="line">a[i+<span class="number">1</span>]+=a[i]-sum,</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,cnt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="p1548-棋盘问题"><a class="markdownIt-Anchor" href="#p1548-棋盘问题"></a> P1548 棋盘问题</h3><p><img src="https://s2.ax1x.com/2020/02/23/3llKFs.png" alt=" " /></p><p> <br />思路：只会枚举<br /><img src="https://s2.ax1x.com/2020/02/23/3lleeg.md.png" alt="" /><br />(突然发现多弄了一个点上去…)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> rectangle=<span class="number">0</span>,square=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;m+<span class="number">1</span>;a++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>;b&lt;n+<span class="number">1</span>;b++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=a+<span class="number">1</span>;x&lt;m+<span class="number">1</span>;x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=b+<span class="number">1</span>;y&lt;n+<span class="number">1</span>;y++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a-x==b-y)</span><br><span class="line">square++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rectangle++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,square,rectangle);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="汇编学习"><a class="markdownIt-Anchor" href="#汇编学习"></a> 汇编学习</h1><h3 id="中断过程"><a class="markdownIt-Anchor" href="#中断过程"></a> 中断过程</h3><p>cpu的硬件自动完成：用中断类型码找到中断向量，并用它设置cs和ip 这个工作的过程<br />cpu在完成中断处理程序后，返回原来的执行点继续执行下面的指令。所以在设置cs:ip之前，还要将原来的cs和ip的值保存起来（同样，在使用call指令时也先保存当前cs和ip的值，再设置cs和ip）<br />8086cpu收到中断信息后引发的中断过程：</p><ol><li>取得中断类型码</li><li>标志寄存器入栈</li><li>设置标志寄存器TF和IF值位0</li><li>cs内容入栈</li><li>ip内容入栈</li><li>从内存地址为中断类型码 *4和中断类型码 *4+2的两个字单元中读取中断处理程序的入口设置为cs和ip</li></ol><p>即：</p><ol><li>取得中断类型码N</li><li>pushf</li><li>TF=0,IF=0</li><li>push cs</li><li>push ip</li><li>(ip)=(N* 4),(cs)=(N* 4+2)</li></ol><h3 id="中断处理程序和iret指令"><a class="markdownIt-Anchor" href="#中断处理程序和iret指令"></a> 中断处理程序和iret指令</h3><p>由于cpu随时都可能检测到中断信息，随时都可能执行中断处理程序，所以中断处理程序必须一直储存在内存某段空间之中。<br />中断处理程序的编写步骤：</p><ol><li>保存用到的寄存器</li><li>处理中断</li><li>恢复用到的寄存器</li><li>用iret指令返回</li></ol><p>iret指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pop ip</span><br><span class="line">pop cs</span><br><span class="line">popf</span><br></pre></td></tr></table></figure><p> </p><p>8086支持256个中断，但系统中要处理的中断事件没有达到256个，所以在中断向量表中，许多单元都是空的</p><h3 id="单步中断"><a class="markdownIt-Anchor" href="#单步中断"></a> 单步中断</h3><p>cpu在执行完一条指令后，如果检测到标志寄存器的TF位为1，则产生单步中断<br />引发中断过程：</p><ol><li>取得中断类型码1</li><li>标志寄存器入栈，TF、IF设置为0<br />#否则cpu永远只能执行单步中断处理程序的第一条指令</li><li>cs、ip 入栈</li><li>(ip)=(1* 4),(cs)=(1* 4+2)</li></ol><p>如果cpu不提供其他功能，只要cpu一加电，它就从预设的地方自动向下一直读取指令执行<br />debug利用了cpu提供的功能，在使用T命令时，debug将TF设置为1<br />cpu提供单步中断功能的原因：单步跟踪程序的执行过程</p><p>IF：中断允许标志位。控制cpu是否允许接收外部中断请求。若IF=1，8086能响应外部中断</p><h3 id="响应中断的特殊情况"><a class="markdownIt-Anchor" href="#响应中断的特殊情况"></a> 响应中断的特殊情况</h3><p>如：</p><blockquote><p>在执行完向ss寄存器传送数据的指令后，即使发生中断，cpu也不会响应<br />（<a href="https://brubbish.github.io/19661.html%EF%BC%89">https://brubbish.github.io/19661.html）</a></p></blockquote><p>如果在执行完设置ss的指令后 cpu响应中断，需要在栈中压入标志寄存器、cs和ip的值。而ss改变，sp未改变，ss：sp指向错误的栈顶，将引起错误。</p><p>应该利用这个特性，将设置ss和sp的指令连续存放</p><h3 id="int指令"><a class="markdownIt-Anchor" href="#int指令"></a> int指令</h3><p>cpu执行int n 指令，相当于引发一个n号中断的过程：</p><ol><li>取中断类型码n</li><li>标志寄存器入栈，IF=0,TF=0</li><li>cs、ip 入栈</li><li>(ip)=(n *4), (cs)=(n *4+4)</li></ol><p>int 指令的最终功能与call指令相似，都是调用一段程序</p><h3 id="dos中-断例程应用中断例程"><a class="markdownIt-Anchor" href="#dos中-断例程应用中断例程"></a> DOS中 断例程应用(中断例程)</h3><p>int 21h 中断例程是dos提供的中断例程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><p>是int 21h中断例程的4ch号功能等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ah,4h       ;程序返回</span><br><span class="line">mov al,0        ;返回值</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><p>(ah)=4ch代表调用第21h号中断例程的4ch号子程序</p><h2 id="端口"><a class="markdownIt-Anchor" href="#端口"></a> 端口</h2><p>各种存储器都和cpu的地址线、数据线、控制线相连。cpu在操作它们的时候，把他们都当作内存对待，把它们总的看做一个由若干存储单元组成的逻辑存储器（内存地址空间）<br />和cpu通过总线相连的芯片除了存储器外，还有：</p><ol><li>接口卡上的接口芯片</li><li>主板上的接口芯片，cpu通过它们对部分外部设备进行访问</li><li>其他芯片</li></ol><p>在这些芯片中，都有一组可由cpu读写的寄存器，这些寄存器通过芯片和cpu的总线相连。cpu将这些寄存器当作端口，对它们进行统一编址，从而建立了统一的端口地址空间。</p><p>cpu可以直接读写：cpu内部寄存器、内存单元、端口 的数据</p><h3 id="端口的读写"><a class="markdownIt-Anchor" href="#端口的读写"></a> 端口的读写</h3><p>cpu最多可以定位64kb个不同的端口，端口地址范围为：0~65535<br />端口的读写指令只有  in（从端口读取）和out（往端口写入)<br />在in和out指令中，只能使用ax或al来存放读入或发送的数据。8位端口用al，16位端口用ax<br />对0~255的端口进行读写时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in al,20h</span><br><span class="line">out 20h,al</span><br></pre></td></tr></table></figure><p>对255~65535的端口进行读写时端口号放在dx中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov dx,3f8h</span><br><span class="line">in al,dx</span><br><span class="line">out dx,al</span><br></pre></td></tr></table></figure><h3 id="cmos-ram芯片"><a class="markdownIt-Anchor" href="#cmos-ram芯片"></a> CMOS RAM芯片</h3><p>包含一个实时钟和128个字节的ram存储器<br />由电池供电，关机后仍然工作，ram中信息不丢失<br />一部分单元保存时间信息，其余大部分单元保存系统配置信息<br />有两个端口，70h为地址端口，71h为数据端口</p><h2 id="shl和shr指令"><a class="markdownIt-Anchor" href="#shl和shr指令"></a> shl和shr指令</h2><p>shl是逻辑左移指令，移出的最后一位写入cf中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,01001000</span><br><span class="line">shl al,1          ;将al中的数据左移一位</span><br></pre></td></tr></table></figure><p>执行后(al)=10010000, cf=0</p><p>移动位数大于1时，将移动位数放在cl中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,01001000</span><br><span class="line">mov cl,3</span><br><span class="line">shl al,cl</span><br></pre></td></tr></table></figure><p> <br />shr是逻辑右移指令，移出的最后一位写入cf中</p><p>左移一位相当于X=X*2,右移一位相当于X=X/2</p><h3 id="cmos-ram中储存的时间信息"><a class="markdownIt-Anchor" href="#cmos-ram中储存的时间信息"></a> CMOS RAM中储存的时间信息</h3><p>CMOS RAM中存放着年月日时分秒，这六个信息长度都为一个字节，以BCD码的方式存放。</p><h4 id="bcd码"><a class="markdownIt-Anchor" href="#bcd码"></a> BCD码</h4><p>以四位二进制数表示十进制数的编码方式<br />一个字节可以表示两个BCD码，高4位表示十位，低4位表示个位</p><h2 id="外中断"><a class="markdownIt-Anchor" href="#外中断"></a> 外中断</h2><p>及时处理外设的输入需要解决：1.cpu如何得知外设输入的时间 2.cpu从何处得到外设的输入</p><h3 id="外中断信息"><a class="markdownIt-Anchor" href="#外中断信息"></a> 外中断信息</h3><p>当cpu外部有需要处理的事情发生的时候，相关芯片将向cpu发出相应的中断信息。cpu在执行完当前指令后，可以检测到发送过来的中断信息，引发中断过程，处理外设的输入</p><h4 id="外中断源"><a class="markdownIt-Anchor" href="#外中断源"></a> 外中断源：</h4><ul><li>可屏蔽中断</li></ul><p>是cpu可以不响应的外中断。如果IF=1，则cpu在执行完当前指令后响应中断；如果IF=0，则不响应可屏蔽中断<br />中断类型码由数据总线送入cpu，不由cpu产生</p><p>8086提供的设置IF指令：<br />1.sti—设置IF=1<br />2.cli—设置IF=0</p><ul><li>不可屏蔽中断</li></ul><p>是cou必须响应的外中断。<br />对于8086cpu，不可屏蔽中断的中断类型码固定为2</p><p>几乎所有由外设引发的外中断都是可屏蔽中断<br />不可屏蔽中断是在系统中有必须处理的紧急情况发生时用来通知cpu的中断信息</p><h3 id="pc机键盘的处理过程"><a class="markdownIt-Anchor" href="#pc机键盘的处理过程"></a> pc机键盘的处理过程</h3><ol><li>键盘输入<br />按下一个键时，键盘中的芯片产生一个扫描码（通码），说明了按下的建在键盘上的位置；松开按下的键时，也产生一个扫描码（断码），送入60h端口<br />扫描码的长度为一个字节，通码第七位为0，断码第七位为1：通码+80h=通码</li><li>引发9号中断<br />相关芯片向cpu发出中断类型码为9的可屏蔽中断信息</li><li>执行int 9 中断例程<br />BIOS提供了int 9中断例程，用来进行基本的键盘输入处理：<br />1.读出扫描码<br />2.如果是字符键的扫描码，将该扫描码和对应的ASCII码送入内存中的BIOS键盘缓冲区；如果是控制键，则将其转变为状态字节（二进制位控制状态的字节）写入内存中储存状态字节的单元<br />3.对键盘系统进行相关控制</li></ol><p>BIOS键盘缓冲区是系统启动后，BIOS用于存放INT 9中断例程所接收的键盘输入的内存区。可以储存15个键盘输入，一个键盘输入用一个字单元存放，高位字节存放扫描码，低位字节存放字符码</p><h2 id="直接定址表"><a class="markdownIt-Anchor" href="#直接定址表"></a> 直接定址表</h2><h3 id="描述了单元长度的标号"><a class="markdownIt-Anchor" href="#描述了单元长度的标号"></a> 描述了单元长度的标号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a db 1,2,3,4,5,6,7,8</span><br><span class="line">b dw 0</span><br></pre></td></tr></table></figure><p>a,b 后面没有’:’ ，这种标号不但表示了内存单元的地址，还表示了内存单元的长度，即字节单元(db)或字单元(dw)或双子单元(dd)</p><p>offset操作符：取得标号的段地址（<a href="https://brubbish.github.io/34199.html#offset">https://brubbish.github.io/34199.html#offset</a> ）<br />seg操作符：取得标号的段地址</p><h1 id="ollydbg-学习"><a class="markdownIt-Anchor" href="#ollydbg-学习"></a> OllyDbg 学习</h1><h2 id="32位寄存器"><a class="markdownIt-Anchor" href="#32位寄存器"></a> 32位寄存器</h2><p>有EAX、ECX、EDX、EBX、ESP、EBP、ESI等。<br />调试时可以双击寄存器，修改寄存器的值。对EIP寄存器需要在反汇编窗口选择新的指令起始地址（‘New origin here’）<br />标志寄存器：C、P、A、Z、S、T、D、O,双击值可以在0和1值切换</p><h2 id="单步跟踪快捷键"><a class="markdownIt-Anchor" href="#单步跟踪快捷键"></a> 单步跟踪快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">F7    单步步进，遇到call指令跟进</span><br><span class="line">F8    单步步过，遇到call指令不跟进</span><br><span class="line">F9+CTRL   直到出现ret&#x2F;retf&#x2F;iret指令中断</span><br><span class="line">F9+Alt    回到应用程序领空</span><br><span class="line">F9    运行程序</span><br><span class="line">F2    设置断点</span><br><span class="line">F2+CTRL   重新调试</span><br><span class="line">F12   暂停程序</span><br></pre></td></tr></table></figure><h2 id="一个traceme"><a class="markdownIt-Anchor" href="#一个traceme"></a> 一个TraceMe</h2><p>win32位获取文本框中内容的函数：<br />GetDlgItemTextA<br />GetDlgItemTextW<br />GetWindowTextA<br />GetWindowTextW<br />用’CTRL+G’打开跟随表达式窗口进行搜索</p><p>在函数入口处设一个断点，程序执行到此处暂停<br /><img src="https://s2.ax1x.com/2020/02/21/3KiIIJ.png" alt="" /><br />然后按’F9+Alt’跳到调用函数的位置<br /> </p><p><img src="https://s2.ax1x.com/2020/02/21/3KEqte.png" alt="" /><br />004011E5-004011F5是用来判断用户名和序列号的<br />顺便：因为真没见过test指令所以搜了一下：<a href="https://www.jianshu.com/p/d989403729ab" target="_blank" rel="noopener">汇编语言–test和cmp区别</a><br /> </p><p><img src="https://s2.ax1x.com/2020/02/21/3KiTi9.png" alt="" /><br />执行到004011F5处，为了不跳转，把ZF寄存器取反或把此处指令改为nop<br />另外，程序限制字符要大于4个，在004011D5的位置。可以把此处跳转的指令（jl）改为nop，或把SF值和OF值改为相同。<br /><img src="https://s2.ax1x.com/2020/02/21/3Ki5a4.png" alt="..." /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;洛谷&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#洛谷&quot;&gt;&lt;/a&gt; 洛谷&lt;/h1&gt;
&lt;h2 id=&quot;函数整理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数整理&quot;&gt;&lt;/a&gt; 函数整理&lt;/h2&gt;
&lt;h3 
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="汇编" scheme="https://brubbish.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="加密与解密" scheme="https://brubbish.github.io/tags/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>2020.02.10-2020.02.16</title>
    <link href="https://brubbish.github.io/34199.html"/>
    <id>https://brubbish.github.io/34199.html</id>
    <published>2020-02-16T07:35:26.000Z</published>
    <updated>2020-03-30T05:28:38.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编学习"><a class="markdownIt-Anchor" href="#汇编学习"></a> 汇编学习</h1><h2 id="offset"><a class="markdownIt-Anchor" href="#offset"></a> offset</h2><p>功能是取得标号的偏移地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line">    start:mov ax,offset start</span><br><span class="line">    &lt;!-- 相当于mov ax,0 --&gt;</span><br><span class="line">    s:mov ax,offstet s</span><br><span class="line">    &lt;!-- 相当于mov ax,3 --&gt;</span><br><span class="line">codesg ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>offset取得了标号start和s的偏移地址：0和3</p><h2 id="jmp"><a class="markdownIt-Anchor" href="#jmp"></a> jmp</h2><h3 id="依据位移进行转移的jmp指令"><a class="markdownIt-Anchor" href="#依据位移进行转移的jmp指令"></a> 依据位移进行转移的jmp指令</h3><h4 id="1jmp-short-标号"><a class="markdownIt-Anchor" href="#1jmp-short-标号"></a> 1.jmp short 标号</h4><p>实现段内短转移，对ip修改范围为：-128~127字节<br />例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">start:mov ax,0</span><br><span class="line">      jmp short s</span><br><span class="line">      add ax,1</span><br><span class="line">    s:inc ax</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>执行后ax=1</p><p>“依据位移进行转移”:指令对应的机器码中不包含转移的目的地址，而是转移的位移，位移由编译器根据汇编指令计算</p><p>jmp short 标号 == （ip）+=8位位移</p><ul><li>8位位移=标号处的地址 - jmp指令后第一个字节的地址</li><li>short 指明位移为8位</li><li>8位位移在编译时算出，在机器码中用补码表示</li></ul><h4 id="2jmp-near-ptr-标号"><a class="markdownIt-Anchor" href="#2jmp-near-ptr-标号"></a> 2.jmp near ptr 标号</h4><p>与jump short 标号 相似<br />功能为：ip+16位位移</p><h3 id="转移的目的地址在指令中的jmp指令"><a class="markdownIt-Anchor" href="#转移的目的地址在指令中的jmp指令"></a> 转移的目的地址在指令中的jmp指令</h3><h4 id="1jmp-far-ptr-标号"><a class="markdownIt-Anchor" href="#1jmp-far-ptr-标号"></a> 1.jmp far ptr 标号</h4><p>用标号的段地址和偏移地址修改cs和ip<br />实现的是段间转移（远转移）<br />功能为：<br /> (cs)=标号所在段地址 <br />（ip）=标号所在偏移地址<br /><strong>机器码：EA0B01BD0B</strong><br /><strong>对应：jmp 0BBD:0B01</strong></p><h3 id="转移地址在寄存器中的jmp指令"><a class="markdownIt-Anchor" href="#转移地址在寄存器中的jmp指令"></a> 转移地址在寄存器中的jmp指令</h3><h4 id="1jmp-16位寄存器"><a class="markdownIt-Anchor" href="#1jmp-16位寄存器"></a> 1.jmp 16位寄存器</h4><p>（ip）=（16位寄存器）</p><h3 id="转移地址在内存中的jmp指令"><a class="markdownIt-Anchor" href="#转移地址在内存中的jmp指令"></a> 转移地址在内存中的jmp指令</h3><h4 id="1jmp-word-ptr-内存单元地址段内转移"><a class="markdownIt-Anchor" href="#1jmp-word-ptr-内存单元地址段内转移"></a> 1.jmp word ptr 内存单元地址（段内转移）</h4><p>内存单元地址处开始存放的一个字作为偏移地址<br />内存单元地址可用寻址方式的任一格式给出</p><h4 id="2jmp-dword-ptr-内存单元地址段间转移"><a class="markdownIt-Anchor" href="#2jmp-dword-ptr-内存单元地址段间转移"></a> 2.jmp dword ptr 内存单元地址（段间转移）</h4><p>高地址处的字是转移到目的地段地址，低地址处是转移到目的偏移地址：<br /> （cs）=（内存单元地址+2）<br /> （ip）=（内存单元地址)</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0123</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">jmp dword ptr ds:[0]</span><br></pre></td></tr></table></figure><p>(cs)=0,(ip)=0123</p><h2 id="jcxz"><a class="markdownIt-Anchor" href="#jcxz"></a> jcxz</h2><p>为有条件转移指令</p><p><em>所有有条件的转移指令都是短转移，在机器码中包含的是位移而不是目的地址，ip修改范围为：-128~127</em></p><p>格式：jcxz 标号<br />相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if((cx)&#x3D;&#x3D;0)</span><br><span class="line">    jmp short 标号</span><br></pre></td></tr></table></figure><h2 id="loop"><a class="markdownIt-Anchor" href="#loop"></a> loop</h2><p><em>所有循环指令都是短转移在机器码中包含的是位移而不是目的地址，ip修改范围为：-128~127</em><br />格式：loop 标号<br />相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(cx)--;</span><br><span class="line">if((cx)!&#x3D;0)</span><br><span class="line">    jmp short 标号;</span><br></pre></td></tr></table></figure><h2 id="根据位移进行转移的意义"><a class="markdownIt-Anchor" href="#根据位移进行转移的意义"></a> 根据位移进行转移的意义</h2><p>在机器码中包含的是位移而不是目的地址—这种设计方便了程序段在内存中的浮动装配，在不同位置都可正确执行</p><h2 id="call和ret指令"><a class="markdownIt-Anchor" href="#call和ret指令"></a> call和ret指令</h2><p>call和ret都是转移指令，修改ip或同时修改cs和ip</p><h3 id="ret和retf"><a class="markdownIt-Anchor" href="#ret和retf"></a> ret和retf</h3><p>ret用栈中的数据修改ip实现近转移，相当于:<br />pop ip<br />retf用栈中的数据修改cs和ip实现远转移，相当于:<br /> pop ip<br /> pop cs<br /> </p><h3 id="call"><a class="markdownIt-Anchor" href="#call"></a> call</h3><p>CPU执行call时：<br />1.将ip或cs和ip压入栈<br />2.实现长转移<br /><strong>call不能实现短转移</strong></p><h3 id="1依据位移进行转移的call指令"><a class="markdownIt-Anchor" href="#1依据位移进行转移的call指令"></a> 1.依据位移进行转移的call指令</h3><p>call 标号<br />执行时进行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(sp)&#x3D;(sp)-2</span><br><span class="line">((sp)*16+(sp))&#x3D;(ip)</span><br><span class="line">(ip)&#x3D;(ip)+16位位移</span><br></pre></td></tr></table></figure><p>将当前ip压栈后，转到标号处<br />相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ip</span><br><span class="line">jmp near ptr 标号</span><br></pre></td></tr></table></figure><h3 id="2转移的目的地址在指令中的call指令"><a class="markdownIt-Anchor" href="#2转移的目的地址在指令中的call指令"></a> 2.转移的目的地址在指令中的call指令</h3><p>call far ptr 标号<br />执行时进行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(sp)&#x3D;(sp)-2</span><br><span class="line">((ss)*16+(sp))&#x3D;(cs)</span><br><span class="line">(sp)&#x3D;(sp)-2</span><br><span class="line">((sp)*16+(sp))&#x3D;(ip)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push cs</span><br><span class="line">push ip</span><br><span class="line">jmp far ptr 标号</span><br></pre></td></tr></table></figure><h3 id="3转移地址在寄存器中的call指令"><a class="markdownIt-Anchor" href="#3转移地址在寄存器中的call指令"></a> 3.转移地址在寄存器中的call指令</h3><p>call 16位寄存器<br />相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ip</span><br><span class="line">jmp 16位寄存器</span><br></pre></td></tr></table></figure><h3 id="4转移地址在内存中的call指令"><a class="markdownIt-Anchor" href="#4转移地址在内存中的call指令"></a> 4.转移地址在内存中的call指令</h3><h4 id="41call-word-ptr-内存单元地址"><a class="markdownIt-Anchor" href="#41call-word-ptr-内存单元地址"></a> 4.1.call word ptr 内存单元地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ip</span><br><span class="line">jmp word ptr 内存单元地址</span><br></pre></td></tr></table></figure><h4 id="42call-dword-ptr-内存单元地址"><a class="markdownIt-Anchor" href="#42call-dword-ptr-内存单元地址"></a> 4.2.call dword ptr 内存单元地址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push cs</span><br><span class="line">push ip</span><br><span class="line">jmp dword ptr 内存单元地址</span><br></pre></td></tr></table></figure><h3 id="call-和-ret配合使用"><a class="markdownIt-Anchor" href="#call-和-ret配合使用"></a> call 和 ret配合使用</h3><p>实现子程序，用call指令执行子程序，再用ret指令转到call指令后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标号：</span><br><span class="line">    ....</span><br><span class="line">    指令</span><br><span class="line">    ....</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><h2 id="mul指令"><a class="markdownIt-Anchor" href="#mul指令"></a> mul指令</h2><p>乘法指令</p><p>注意：</p><ul><li>两个相乘的数要么都是8位，要么都是16位<br /> 1.如果是8位，一个默认放在al中，另一个放在8位寄存器或内存字节单元中。结果默认放在ax中<br /> 2.如果是16位，一个默认在ax中，另一个放在16位寄存器或内存字单元中。结果高位默认放在dx中，低位2放在ax中</li></ul><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mul 寄存器&#x2F;内存单元</span><br></pre></td></tr></table></figure><p>如：<br />1.100*10</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,100</span><br><span class="line">mov bl,10</span><br><span class="line">mul bl</span><br></pre></td></tr></table></figure><p>结果：(ax)=1000</p><p>2.100*10000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,100</span><br><span class="line">mov bx,10000</span><br><span class="line">mul bx</span><br></pre></td></tr></table></figure><p>结果：(ax)=4240h (dx)=000fh<br />(f4240h=1000000)</p><h2 id="一个公式"><a class="markdownIt-Anchor" href="#一个公式"></a> 一个公式</h2><p> 将可能产生溢出的除法运算转变为多个不会产生溢出的除法运算(商小于65536)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x&#x2F;n&#x3D;int (h&#x2F;n)*65536+[ rem(h&#x2F;n)*65536+l]&#x2F;n</span><br></pre></td></tr></table></figure><p>x : 被除数(0,ffffffff)<br />n : 除数(0,ffff)<br />h : x高16位<br />l : x低16位<br />int() : 取商<br />rem() : 取余</p><h2 id="标志寄存器"><a class="markdownIt-Anchor" href="#标志寄存器"></a> 标志寄存器</h2><p>标志寄存器作用：<br />1.用来储存相关指令的执行结果<br />2.用来为CPU执行相关指令提供行为依据<br />3.用来控制CPU的相关工作方式<br />8086CPU有16位，其中储存的信息被称为程序状态字（psw）<br /><strong>flag是按位起作用的，每一位都有专门的含义，记录特定的信息</strong></p><p><img src="https://s2.ax1x.com/2020/02/12/1bafdf.png" alt="flag寄存器各位示意图 " /></p><p>flag的1、3、5、12、13、14、15位在8086CPU中没有使用，其他位都有特殊含义</p><p>影响标志寄存器的大都是运算指令，没有影响的大都是传送指令</p><h3 id="zf标志"><a class="markdownIt-Anchor" href="#zf标志"></a> ZF标志</h3><p>零标志位<br />记录相关指令执行后结果是否为0，如果为0那么ZF=1，如果不为0那么ZF=0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,1</span><br><span class="line">sub ax,1</span><br></pre></td></tr></table></figure><p>执行后zf=1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2</span><br><span class="line">sub ax,1</span><br></pre></td></tr></table></figure><p>执行后zf=0</p><h3 id="pf标志"><a class="markdownIt-Anchor" href="#pf标志"></a> PF标志</h3><p>奇偶标志位<br />记录相关指令执行后结果的所有bit位中 1 的个数是否为偶数，如果为偶数PF=1，如果不为偶数PF=0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,1(10)</span><br><span class="line">add al,10(10)</span><br></pre></td></tr></table></figure><p>结果为00001011B，∴PF=0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,1</span><br><span class="line">or al,2</span><br></pre></td></tr></table></figure><p>结果为00000011B，∴PF=1</p><h3 id="sf标志"><a class="markdownIt-Anchor" href="#sf标志"></a> SF标志</h3><p>符号标志位<br />记录相关指令执行后结果是否为负，如果负sf=1，如果非负sf=0</p><p>计算机中通常用补码表示有符号数据，一个数据可以看作是 有符号数，也可以看成无符号数。<strong>不管如何看待，CPU在执行指令的时候就已经包含了两种含义，也将得到两种结果，关键在于程序需要哪种结果</strong><br />sf标志是对于有符号数运算的一种记录，记录了数据的正负<br />将数据<strong>当作有符号数运算时，可以通过 sf 知道结果的正负</strong><br />将数据<strong>当作无符号数运算时， sf 值无意义，虽然相关指令影响了它的值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,10000001B</span><br><span class="line">add al,1</span><br></pre></td></tr></table></figure><p>结果为10000010，sf=1，表示：如果指令进行的是有符号数的运算，那么结果为负。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,10000001B</span><br><span class="line">add al,01111111B</span><br></pre></td></tr></table></figure><p>结果为0，sf=0，表示如果指令进行的是有符号数运算，那么结果为非负。</p><p><strong>单纯地考查sf的值不能知道结果的正负，因为sf记录的只是可以在计算机中存放的相应位数的结果的正负(如果发生溢出)</strong></p><h3 id="cf标志"><a class="markdownIt-Anchor" href="#cf标志"></a> CF标志</h3><p>进位标志位<br />进行<strong>无符号数</strong>运算的时候，它记录了运算结果的最高有效位向更高位的进位值，或从更高位的借位值</p><p>对于位数为N的无符号数来说，N-1位为它的<em>最高有效位</em>，假想存在的第N位就是相对于最高有效位的更高位</p><p>当两个数据相加的时候，可能产生从最高有效位向更高位的进位。CPU不丢弃这个高位进位值，而是保存在CF上</p><h3 id="of标志"><a class="markdownIt-Anchor" href="#of标志"></a> OF标志</h3><p>溢出标志位<br />在进行<strong>有符号数</strong>运算时，如果结果超过了机器能表达的范围称为溢出<br />记录了有符号数运算的结果是否发生了溢出，如果发生溢出OF=1，如果没有OF=0</p><p><strong>CF是对无符号数运算有意义的标志位，OF是对有符号数运算有意义的标志位。</strong><br /><strong>对于无符号数运算，CPU用CF来记录是否产生进位；对于有符号数，CPU用OF来记录是否产生溢出,还要用SF来记录结果的符号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,98</span><br><span class="line">add al,99</span><br></pre></td></tr></table></figure><p>执行后 CF=0，OF=1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov al,0f0H</span><br><span class="line">add al,78H</span><br></pre></td></tr></table></figure><p>执行后CF=1，OF=0</p><h3 id="adc指令"><a class="markdownIt-Anchor" href="#adc指令"></a> adc指令</h3><p>带进位加法指令，利用了CF位上记录的进位值<br />格式：adc 操作对象1，操作对象2<br />操作对象1=操作对象1+操作对象2+CF<br />比add指令多加了一个CF位的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add ax,bx</span><br><span class="line">&#x3D;&#x3D;</span><br><span class="line">add al,bl</span><br><span class="line">adc ah,bh</span><br></pre></td></tr></table></figure><p>adc指令执行后也可能产生进位值，所以也会对CF位进行设置<br />add指令和adc指令配合 可以对更大的数据进行加法运算</p><p>例：<br />计算1EF0001000H+2010001EF0H,结果放在ax，bx，cx中</p><p>1.将低16位相加，CF中记录相加的进位值<br />2.将次高16位和CF相加，CF中记录相加的进位值<br />3.高16位和CF相加，CF中记录相加的进位值</p><h3 id="sbb指令"><a class="markdownIt-Anchor" href="#sbb指令"></a> sbb指令</h3><p>带借位减法指令，利用了CF位上的借位值<br />格式：sbb 操作对象1，操作对象2<br />功能：操作对象1=操作对象1-操作对象2-CF<br />可以对任意大的数据进行减法运算，思路同adc指令</p><h3 id="cmp指令"><a class="markdownIt-Anchor" href="#cmp指令"></a> cmp指令</h3><p>比较指令，功能相当于减法指令，只是不保存结果，仅仅根据计算结果对标志寄存器进行设置<br />格式：cmp 操作对象1，操作对象2<br />cmp可以对无符号数进行比较，也可以对有符号数进行比较<br />通过cmp指令执行后，相关标志位的值可以看出比较的结果：</p><p>进行无符号数比较时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp ax,bx</span><br></pre></td></tr></table></figure><p>如果(ax)=(bx)则(ax)-(bx)=0，所以zf=1<br />如果(ax)!=(bx)则(ax)-(bx)!=0，所以zf=0<br />如果(ax)&lt;(bx)则(ax)-(bx)将产生借位，所以cf=1<br />如果(ax)&gt;=(bx)则(ax)-(bx)将不必借位，所以cf=0<br />如果(ax)&gt;(bx)则(ax)-(bx)=0不必借位且结果不为0，所以cf=0，zf=0<br />如果(ax)&lt;=(bx)则(ax)-(bx)=0可能借位，结果可能为0，所以cf=1或zf=1</p><p>进行有符号数比较时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp ah,bh</span><br></pre></td></tr></table></figure><p>如果(ah)=(bh)则(ah)-(bh)=0，所以zf=1<br />如果(ah)!=(bh)则(ah)-(bh)!=0，所以zf=0</p><p>如果sf=1，of=0，(ah)&lt;(bh)<br />如果sf=1，of=1，(ah)&gt;(bh)<br />如果sf=0，of=1，(ah)&lt;(bh)<br />如果sf=0，of=0，(ah)&gt;=(bh)</p><p>of=0，说明没有溢出，逻辑上真正结果的正负=实际结果的正负<br />如果因为溢出导致了实际结果为负(正)，那么逻辑上真正的结果必然为正(负)</p><p>*zf：记录结果是否为0。如果为0那么ZF=1，如果不为0那么ZF=0<br />*cf：记录了无符号数运算结果的最高有效位向更高位的进位值<br />*of：记录了有符号数运算的结果是否发生了溢出，如果发生溢出OF=1，如果没有OF=0。 OF=0,说明逻辑上真正结果的正负=实际结果的正负<br />*sf： 记录相关指令执行后结果是否为负，如果负sf=1，如果非负sf=0<br />*pf：记录相关指令执行后结果的所有bit位中 1 的个数是否为偶数，如果为偶数PF=1，如果不为偶数PF=0</p><h2 id="检测比较结果的条件转移指令"><a class="markdownIt-Anchor" href="#检测比较结果的条件转移指令"></a> 检测比较结果的条件转移指令</h2><p>与call和ret类似，通常和cmp配合使用<br />检测被cmp影响的，表示比较结果的标志位</p><p>根据<strong>无符号数</strong>的比较结果进行转移的条件转移指令检测zf、cf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">指令            含义                检测标志位</span><br><span class="line">je             等于则转移            zf&#x3D;1      </span><br><span class="line">jne          不等于则转移            zf&#x3D;0                    </span><br><span class="line">jb             低于则转移            cf&#x3D;1</span><br><span class="line">jnb          不低于则转移            cf&#x3D;0                   </span><br><span class="line">ja             高于则转移            cf&#x3D;0&amp;&amp;zf&#x3D;0     </span><br><span class="line">jna          不高于则转移            cf&#x3D;1||zf&#x3D;1</span><br></pre></td></tr></table></figure><p>根据<strong>有符号数</strong>的比较结果进行转移的条件转移指令检测sf、of、zf</p><h2 id="df标志和串传送指令"><a class="markdownIt-Anchor" href="#df标志和串传送指令"></a> DF标志和串传送指令</h2><p>DF：方向标志位，在串传送指令中，控制每次操作后si、di的增减<br />df=0，每次操作后si、di递增<br />df=1，每次操作后si、di递减</p><ol><li><p>movsb<br />功能：将ds：si指向的内存单元中的<em>字节</em>送入es：di中，然后根据标志寄存器df位的值将si和di递增或递减</p></li><li><p>movsw<br />功能：将ds：si指向的内存单元中的<em>字</em>送入es：di中，然后根据标志寄存器df位的值将si和di递增2或递减2</p></li></ol><p>一般来说，movsb和movsw都和rep配合使用<br />格式： rep movsb<br />功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s:movsb</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><p>对df位进行设置的指令：<br />cld指令：将df位置0<br />std指令：将df位置1</p><p>使用串传送指令进行数据的传送，需要：</p><ol><li>传送的原始位置：ds：si</li><li>传送的目的位置：es：di</li><li>传送的长度：cx</li><li>传送的方向：df  (正向/反向传送，si、di递增/递减)</li></ol><h3 id="pushf和popf"><a class="markdownIt-Anchor" href="#pushf和popf"></a> pushf和popf</h3><p>pushf是将标志寄存器的值压栈<br />popf是从栈中弹出数据送入标志寄存器中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0 ;ax清零</span><br><span class="line">push ax ;ax入栈</span><br><span class="line">popf ;把栈中数据弹出到PSW。至此，PSW已经被全置为: 0000 0000 0000 0000 B</span><br><span class="line"></span><br><span class="line">mov ax,0fff0h</span><br><span class="line">add ax,0010h</span><br><span class="line"></span><br><span class="line">CF：假设这是无符号运算：FFF0h+0010h &#x3D; 1111 1111 1111 0000b + 0000 0000 0001 0000b</span><br><span class="line">&#x3D;(进位1)0000 0000 0000 0000b，产生进位1，CF标志 &#x3D; 1。</span><br><span class="line"></span><br><span class="line">OF：假设这是有符号运算：FFF0h此处为补码形式，(FFF0h)原 &#x3D; 1000 0000 0001 0000b。FFF0h+0010h&#x3D;0，OF标志 &#x3D; 0</span><br><span class="line"></span><br><span class="line">pushf</span><br><span class="line">pop ax</span><br><span class="line">这两句把 ax的值设置为：(0000 00** 010* 0101)b</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p><em>tips</em>:</p><p><strong>正加正得负，或负加负得正，肯定溢出</strong></p><p><strong>一个正数和一个负数相加不可能溢出</strong></p><h2 id="内中断"><a class="markdownIt-Anchor" href="#内中断"></a> 内中断</h2><p>任何一个cpu都可以在执行完当前正在执行的指令后，检测到从cpu外部发送来的或内部产生的一种特殊信息，并且可以立即对所接收到的信息进行处理，这种信息称为<strong>中断信息</strong>。</p><h3 id="内中断的产生"><a class="markdownIt-Anchor" href="#内中断的产生"></a> 内中断的产生</h3><p>cpu内部有4种情况可以产生需要及时处理的中断信息<br />处理中断信息首先要知道接收到的信息的来源，所以中断信息中必须包含识别来源的编码。8086cpu用中断类型码来标识中断信息的来源<br />中断类型码为一个字节型数据，即可以表示256种中断信息的来源（简称中断源）</p><ol><li>除法错误，如执行div指令产生的除法溢出 中断类型码：0</li><li>单步执行 中断类型码：1</li><li>执行into指令 中断类型码：4</li><li>执行int 指令 指令格式为int n,n为字节型立即数,中断类型码：n</li></ol><h3 id="中断向量表"><a class="markdownIt-Anchor" href="#中断向量表"></a> 中断向量表</h3><p>中断处理程序入口地址的列表<br />cpu用8位的终端类型码，通过中断向量表，找到相应的中断处理程序的入口地址<br />中断向量表在内存中保存，其中存放着256个中断源所对应的中断处理程序的入口<br />cpu知道了中断类型码就可以将中断类型码作为中断向量表的表项号，定位相应的表项，从而得到程序的入口地址<br />如果使用8086cpu，中断向量表就必须存放在0000：0000~0000：03FF中，一个表项占两个字，高地址存放段地址，低地址字存放偏移地址</p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><p>*一个字节：8位<br />*一个字==两个字节</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;汇编学习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#汇编学习&quot;&gt;&lt;/a&gt; 汇编学习&lt;/h1&gt;
&lt;h2 id=&quot;offset&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#offset&quot;&gt;&lt;/a&gt; offs
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="汇编" scheme="https://brubbish.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2020.02.03-2020.02.09</title>
    <link href="https://brubbish.github.io/7089.html"/>
    <id>https://brubbish.github.io/7089.html</id>
    <published>2020-02-09T07:35:26.000Z</published>
    <updated>2020-03-30T05:28:37.107Z</updated>
    
    <content type="html"><![CDATA[<p>这周学得比较少因为刚把输入法从全拼换成双拼在练习打字…<br />##1.搞博客 -在博客里加入了点效果（小声 bb：以前觉得应该挺复杂的，其实有了轮子之后也就一行代码的事啊）<br />参考：<a href="https://github.com/VincentGarreau/particles.js" target="_blank" rel="noopener">https://github.com/VincentGarreau/particles.js</a> -了解了 GitHub 上博客的结构<br /><a href="https://www.cnblogs.com/Eaglery/p/5126279.html" target="_blank" rel="noopener">使用 GitHub,Jekyll 打造自己的免费独立博客</a></p><p>##2.汇编语言学习<br />###div 指令<br />-div 是除法指令 -除数：有 8 位和 16 位两种，在一个寄存器或内存单元中 -被除数：默认放在 ax 或 dx 和 ax 中<br />如果除数为 8 位，则被除数为 16 位，默认放在 ax 中存放<br />如果除数为 16 位，则被除数位 32 位，在 dx 和 ax 中存放，dx 存放高 16 位，ax 存放低 16 位 -结果：<br />除数为 8 位（16^2-1=255)，al 储存商，ah 储存余数<br />除数为 16 位(16^4-1=65535)，ax 储存商，dx 储存余数</p><p>divbyteptrds:[0]含义：<br />~(al)=(ax)/((ds)*16+0)的商<br />(ah)=(ax)/((ds)*16+0)的余数</p><p>divwordptr[bx+si+8]含义：<br />~(ax)=[(dx)*10000h+(ax)]/((ds)*16+(bx)+(si)+8)的商<br />(dx)=[(dx)*10000h+(ax)]/((ds)*16+(bx)+(si)+8)的余数</p><p>###dd 指令 -用 db 定义字节型数据 -用 dw 定义字型数据 -用 dd 定义 double（双字）型数据</p><p>###dup<br />dup 是一个操作符，和 db、dw、dd 等数据定义伪指令配合使用，用来进行数据的重复<br />db/dw/dd 重复次数 dup（重复的数据）</p><p>如：<br />~db200dup（0）<br />：定义了 200 个字节的 0<br />db3dup（‘abc’）<br />：定义了 9 个字节:‘abcabcabc’</p><p>###转移指令<br />指可以修改 ip 或同时修改 cs 和 ip 的指令</p><p>段内转移：只修改 ip<br /><sub>短转移：-128</sub>127<br />近转移：-32768~32767</p><p>##3.c 语言-学生成绩管理系统</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">structstu&#123;</span><br><span class="line">intnum;</span><br><span class="line">charname[<span class="number">10</span>];</span><br><span class="line">intsex;</span><br><span class="line">intage;</span><br><span class="line">intscore;</span><br><span class="line">structstu*next;</span><br><span class="line">&#125;;</span><br><span class="line">structstu*p;</span><br><span class="line">voidmenu()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"choseafunction:\n"</span></span><br><span class="line"><span class="string">"1.录入信息\n"</span></span><br><span class="line"><span class="string">"2.打印信息\n"</span></span><br><span class="line"><span class="string">"3.保存信息\n"</span></span><br><span class="line"><span class="string">"4.读取信息\n"</span></span><br><span class="line"><span class="string">"5.统计所有人数\n"</span></span><br><span class="line"><span class="string">"6.按学号查找信息\n"</span></span><br><span class="line"><span class="string">"7.修改信息\n"</span></span><br><span class="line"><span class="string">"8.删除信息\n"</span></span><br><span class="line"><span class="string">"9.退出\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">voidremove();</span><br><span class="line">voidbuild();</span><br><span class="line">voidprint(structstu*p);</span><br><span class="line">voidsum(structstu*p);</span><br><span class="line">voidsave(structstu*p);</span><br><span class="line">voidfind(structstu*p);</span><br><span class="line">voidmodify(structstu*p);</span><br><span class="line">voidread();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">intmain()&#123;</span><br><span class="line">intn;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">switch</span>(n)&#123;</span><br><span class="line">case9:</span><br><span class="line">return0;</span><br><span class="line">case1:<span class="comment">//录入</span></span><br><span class="line">build();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case2:<span class="comment">//打印</span></span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case3:<span class="comment">//保存</span></span><br><span class="line">save(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case4:<span class="comment">//读取</span></span><br><span class="line"><span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case5:<span class="comment">//统计人数</span></span><br><span class="line">sum(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case6:<span class="comment">//查找</span></span><br><span class="line"><span class="built_in">find</span>(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case7:<span class="comment">//修改</span></span><br><span class="line">modify(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">case8:<span class="comment">//删除</span></span><br><span class="line"><span class="built_in">remove</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Wrongnum\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">voidbuild()&#123;</span><br><span class="line">structstu*head=<span class="literal">NULL</span>,*nextp;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">head=p;</span><br><span class="line"><span class="keyword">while</span>(head-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序输入学号姓名性别（男1女0）年龄成绩输入-1结束\n"</span>);</span><br><span class="line">nextp=(structstu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstu));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nextp-&gt;num);</span><br><span class="line"><span class="keyword">while</span>(nextp-&gt;num!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d%d%d"</span>,nextp-&gt;name,&amp;nextp-&gt;sex,&amp;nextp-&gt;age,&amp;nextp-&gt;score);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">p=nextp;</span><br><span class="line">head=p;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">head-&gt;next=nextp;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">nextp=(structstu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstu));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;nextp-&gt;num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">voidprint(structstu*p)&#123;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%s%d%d%d\n"</span>,p-&gt;num,p-&gt;name,p-&gt;sex,p-&gt;age,p-&gt;score);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">voidsum(structstu*p)&#123;</span><br><span class="line">inti=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">voidfind(structstu*p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入学号："</span>);</span><br><span class="line">intnum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;num==num)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%s%d%d%d\n"</span>,p-&gt;num,p-&gt;name,p-&gt;sex,p-&gt;age,p-&gt;score);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"WrongNumber\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">voidmodify(structstu*p)&#123;</span><br><span class="line">structstu*head;</span><br><span class="line">head=p;</span><br><span class="line">intnum;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入修改学生的学号:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="keyword">while</span>(head)&#123;</span><br><span class="line"><span class="keyword">if</span>(head-&gt;num!=num)&#123;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"学号错误"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入修改学生的信息:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"顺序输入姓名性别（男1女0）年龄成绩输入:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d%d%d"</span>,head-&gt;name,&amp;head-&gt;sex,&amp;head-&gt;age,&amp;head-&gt;score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"成功修改\n"</span>);</span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">voidremove()&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入删除的学生学号："</span>);</span><br><span class="line">intn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">structstu*head,*nextp,*d;</span><br><span class="line">head=p;</span><br><span class="line">nextp=p;</span><br><span class="line">d=(structstu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstu));</span><br><span class="line"><span class="keyword">if</span>(head-&gt;num==n)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"success"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(head)&#123;</span><br><span class="line"><span class="keyword">if</span>(n!=head-&gt;num)&#123;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">nextp=nextp-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"学号错误"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">nextp-&gt;next=head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(head);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"success"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">voidsave(structstu*p)&#123;</span><br><span class="line">FILE*fp;</span><br><span class="line">fp=fopen(<span class="string">".\\stuinfo.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">"%d%s%d%d%d\n"</span>,p-&gt;num,p-&gt;name,p-&gt;sex,p-&gt;age,p-&gt;score);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数据保存成功。\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">voidread()&#123;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">structstu*nextp=p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">while</span>(nextp)&#123;</span><br><span class="line">p=nextp;</span><br><span class="line">nextp=nextp-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FILE*fp;</span><br><span class="line">fp=fopen(<span class="string">".\\stuinfo.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(fp==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"文件无法打开"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">structstu*nextp,*head;</span><br><span class="line">head=<span class="literal">NULL</span>;</span><br><span class="line">nextp=(structstu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstu));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;num)==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%s"</span>,nextp-&gt;name);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;sex);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;age);</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%d"</span>,&amp;nextp-&gt;score);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">head=nextp;</span><br><span class="line">p=head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">head-&gt;next=nextp;</span><br><span class="line">head=head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">nextp=(structstu*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstu));</span><br><span class="line">nextp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周学得比较少因为刚把输入法从全拼换成双拼在练习打字…&lt;br /&gt;
##1.搞博客 -在博客里加入了点效果（小声 bb：以前觉得应该挺复杂的，其实有了轮子之后也就一行代码的事啊）&lt;br /&gt;
参考：&lt;a href=&quot;https://github.com/VincentGar
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="汇编" scheme="https://brubbish.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2020.01.19-2020.02.02</title>
    <link href="https://brubbish.github.io/17577.html"/>
    <id>https://brubbish.github.io/17577.html</id>
    <published>2020-02-02T08:26:22.000Z</published>
    <updated>2020-03-30T05:28:36.052Z</updated>
    
    <content type="html"><![CDATA[<p>##1.用 github 搞了博客<br />参考：<a href="https://www.fast.ai/2020/01/16/fast_template/" target="_blank" rel="noopener">https://www.fast.ai/2020/01/16/fast_template/</a><br />并用了他的模板…<br />页面还没改完</p><p>##2.汇编语言学习 ####[BX]和 loop 指令<br />一次执行完循环的过程：<br />g 指令：<br />“g0012”从当前的 cs：ip 指向的指令执行，一直到（ip）=0012 为止<br />p 指令：<br />直到（cx）=0 为止 ####段前缀：<br />在访问内存单元的指令中显式低给出内存单元段地址所在的段寄存器，如：<br />movax,ds:[bx]<br />movax,cs:[bx]<br />movax,ss,[bx]<br />movax,ex,[0]<br />… ####在代码段中使用数据<br />codesegment<br />“dw0123，0456”<br />…<br />dw 的含义是定义字型数据，因为用 dw 定义的数据出于代码段的最开始，所以偏移地址为 0，这两个数据就在代码段的偏移 0，2 处，地址为 cs:0,cs:2 ####将数、代码、栈放入不同的段<br />一个段的容量不能大于 64kb（8086 模式的限制）</p><blockquote><p>assumecs:code,ds:data,ss:stack<br />datasegment</p></blockquote><pre><code>dw0123h,0456h,0789h,0abch,0defh,0cbah,0987h</code></pre><p>dataends<br />stacksegment<br />dw0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br />stackends<br />codesegment<br />start:movax,<mark>stack</mark><br />movss,ax<br />movsp:20h<br />movax,<mark>data</mark>;将名称为 data 的段的段地址送入 ax（数值）<br />movds,ax<br />movbx,0<br />movcx,8<br />s: push[bx]<br />addbx,2<br />loops<br />movbx,0<br />movcx,8<br />s0: pop[bx]<br />addbx,2<br />loops0<br />movax,4c00h<br />int21h<br />codeends<br />endstart</p><p>####and 和 or 指令<br />and：按位进行与运算<br />moval，01100011B<br />andal，001111011B<br />or：按位进行或运算<br />…<br />oral，00111011B</p><p>####以字符形式给出的数据<br />用’…'的方式指明数据是以字符形式给出的，编译器将把它们转化为对应的 ascii 码<br />db’unix’相当于 db75h,6eh,49h,58h(ascii 码)</p><p>####[bx+idata]<br />movax,[200+bx]==movax,[bx+200]==movax,200[bx]==movax,[bx].200<br />(ax)=((ds)*16+(bx)+200)<br />用[bx+idata]的方式进行数组的处理</p><p>####SI、DI<br />是和 bx 功能相近的寄存器，不能够分成两个 8 位寄存器来使用<br />可以使用[bx+si+idata]和[bx+di+idata]的方式表示内存单元，不能用[si+di]<br />####BP<br />在 8086cpu 中只有 si、di、bp、bx 四个寄存器能在[…]里进行内存单元的寻址<br />四个寄存器可以单个出现或只能出现：bx+si;bx+di;bp+si;bp+di。bx+b；si+di 是错的<br />只要使用了 bp 而没有给出段地址，段地址就默认在 ss 中 ####数据位置的表达 1.直接用立即数 idata 表示：movax,1；moval,‘a’ 2.将数据存在寄存器中 3.要处理的数据在内存中，可用[…]的格式给出 EA,SA 在某个段寄存器中<br />-1.movax,[bx+si+8]中段地址默认在 ds 中<br />-2.movax,[bp+si+8]中段地址默认在 ss 中 -存放段地址的寄存器也可以显性给出：movax,ds:[bx+si+8]</p><p>#####指令要处理的数据的尺寸<br />-1.通过寄存器名指明：ax 字，al/ah 字节<br />-2.用操作符_word/byte__ptr<br />incwordptr[bx]<br />addbyteptr[bx],2<br />否则 cpu 无法得知要访问的单元是字单元还是字节单元<br />-3.其他<br />如 push,[1000]</p><p>###寄存器整理<br />####bx、si、di、bp：<br />不使用 bp 时段地址默认在 ds 中<br />使用 bp 时段地址默认在 ss 中<br />####dx：累加寄存器<br />####cs：代码<br />####ss:sp：栈顶<br />####ds：数据<br />####cx：loop</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1.用 github 搞了博客&lt;br /&gt;
参考：&lt;a href=&quot;https://www.fast.ai/2020/01/16/fast_template/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.fast.ai/202
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="汇编" scheme="https://brubbish.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2020.01.12-2020.01.18</title>
    <link href="https://brubbish.github.io/19661.html"/>
    <id>https://brubbish.github.io/19661.html</id>
    <published>2020-01-18T06:13:51.000Z</published>
    <updated>2020-03-30T05:28:35.271Z</updated>
    
    <content type="html"><![CDATA[<p>##1.scanf、getchar、getch、getche和缓冲区<br /><a href="https://cloud.tencent.com/developer/article/1354983" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1354983</a><br /><a href="https://www.cnblogs.com/lanhaicode/p/10575049.html" target="_blank" rel="noopener">https://www.cnblogs.com/lanhaicode/p/10575049.html</a></p><blockquote><p>读取字符时：<br />(1)scanf()以Enter结束一次输入，不会舍弃最后的回车符（即回车符会残留在缓冲区中）；<br />(2)getchar()以Enter结束输入，不会舍弃最后的回车符。<br />读取字符串时：<br />(1)scanf()以Space、Enter、Tab结束一次输入，不会舍弃最后的回车符；<br />(2)gets()以Enter结束输入（空格不结束），接受空格，会舍弃最后的回车符！<br />所以读取一个字符串中的每一个字符的时候，往往使用getchar()而不使用scanf()，因为一个字符串中是会出现空格的。如果使用scanf()会造成将一个字符串首先读入第一个空格前的部分，其余部分会残留在输入缓冲区的情况，在下次读取时可能会出现错误。<br />其次为了避免出现上述问题，必须要在读取输入前，清空缓冲区的残留数据</p></blockquote><p>缓冲区是一块内存空间，用来缓存数据，目的是让快速的cpu不必等待慢速的输入输出设备，同时减少操作硬件的次数</p><p>根据数据刷新的时机可将缓冲区类型分为<br />1.全缓冲：当缓冲区被填满以后才进行真正的输入输出操作<br />2.行缓冲：当输入或输出时遇到换行符时才进行真正的输入输出操作<br />3.无缓冲：没有缓冲区，立即进行输入输出</p><p>Windows下c语言的printf是无缓冲的</p><p>##2.洛谷<br />####1.P1597-语句解析<br /><img src="https://img-blog.csdnimg.cn/20200117224034766.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />没有啥思路就看题解了<br />因为scanf成功读入一个返回值为1，读入两个返回值为2，可以此作为循环条件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">intmain()&#123;</span><br><span class="line">inta[<span class="number">3</span>];</span><br><span class="line">charc1,c2;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c:=%c;"</span>,&amp;c1,&amp;c2)==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c2&gt;<span class="string">'0'</span>&amp;&amp;c2&lt;<span class="string">'a'</span>)&#123;</span><br><span class="line">a[c1-<span class="string">'a'</span>]=c2-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">a[c1-<span class="string">'a'</span>]=a[c2-<span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%d%d"</span>,a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//chara=14;</span></span><br><span class="line"><span class="comment">//intb;</span></span><br><span class="line"><span class="comment">//b=a;</span></span><br><span class="line"><span class="comment">//printf("%d",b);</span></span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####2.P1739-表达式括号匹配<br /><img src="https://img-blog.csdnimg.cn/20200117223137978.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />第一次提交了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">intmain()&#123;</span><br><span class="line">charb;</span><br><span class="line">inti=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(b==<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="string">'('</span>)</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="string">')'</span>)</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO"</span>);</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没考虑到右括号在左括号旁边的情况如：)(a+1)*(a+2)(@<br />看了一下题解：<br /><strong>每出现一个左括号+1，每出现一个右括号且该变量大于0时-1.最后整个字符串判断完之后如果这个变量值为0则原表达式是匹配的。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(b==<span class="string">'@'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="string">'('</span>)&#123;</span><br><span class="line">i++;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b==<span class="string">')'</span>)&#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(c&gt;<span class="number">0</span>)</span><br><span class="line">c--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==i&amp;&amp;c==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO"</span>);</span><br><span class="line">return0;</span><br></pre></td></tr></table></figure><p>通过了</p><p>##3.汇编语言学习<br />#####栈段<br />栈顶的变化范围是0~ffff，栈空时sp=0，栈满时sp也=0，一个栈容量最大为64kb<br />执行修改栈段寄存器ss的指令时，下一条指令也紧接着被执行<br />如用t命令执行movss，ax时，下一条movsp，10也紧接着执行了<br />#####一个源程序从写出到执行的过程<br />1.编写汇编源程序，产生了一个存储源程序的文本文件<br />2.用汇编语言编译程序编译源程序，产生目标文件，再用连接程序对目标文件进行连接，生成可执行文件<br />可执行文件包1.含程序（机器码）和数据，2.相关描述信息，如程序有多大，要占用多少内存空间等<br />3.执行可执行文件中的程序<br />#####源程序<br />例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">assumecs:codesg</span><br><span class="line">codesgsegment</span><br><span class="line">movax,0123</span><br><span class="line">movbx,0456</span><br><span class="line">addax,bx</span><br><span class="line">addax,ax</span><br><span class="line"></span><br><span class="line">movax,4c00</span><br><span class="line">int21</span><br><span class="line"></span><br><span class="line">codesgends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>1.伪指令<br />1。<code>xxxsegment\n····\nxxxends</code><br />是必须使用到的一对伪指令，功能是定义一个段，xxx是段名<br />一个汇编程序是由多个段组成的，这些段被用来存放代码/数据/当作栈空间用<br />一个汇编程序中至少要有一个段用来存放代码<br />段名（xxx）最终将被处理为一个段的段地址<br />2。<code>end</code><br />是一个汇编程序的结束标记<br />3。<code>assume</code><br />假设某一段寄存器和程序中的某一个用segment…ends定义的段相关联，如例中段codesg和cpu中的段寄存器cs联系起来</p><p>#####[bx]和loop指令<br />1.[bx]<br />要完整地描述一个内存单元，需要两种信息：1。内存单元的地址；2.内存单元的长度（类型）（有多大）<br />moval（ax）,[bx]：<br />将一个内存单元的内容送入al（ax），这个内存单元的长度为1（2）字节，存放一个字节（一个字），偏移地址在bx中，段地址在ds中。<br />2.loop<br />用loop指令实现循环功能，cx中存放循环次数<br />执行loop指令的时候，1.（cx）=（cx)-1;2.判断（cx），不为零则转至标号处执行程序，如果为零则向下执行<br />``例：计算2^12</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">assumecs:code</span><br><span class="line">codesegment</span><br><span class="line">movax,2</span><br><span class="line"></span><br><span class="line">movcx,11</span><br><span class="line">s:addax,ax</span><br><span class="line">loops</span><br><span class="line"></span><br><span class="line">movax,4c00h</span><br><span class="line">int21h</span><br><span class="line">codeends</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1.scanf、getchar、getch、getche和缓冲区&lt;br /&gt;
&lt;a href=&quot;https://cloud.tencent.com/developer/article/1354983&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="汇编" scheme="https://brubbish.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2019.12.08-2019.12.14</title>
    <link href="https://brubbish.github.io/2598.html"/>
    <id>https://brubbish.github.io/2598.html</id>
    <published>2019-12-14T07:35:43.000Z</published>
    <updated>2020-03-30T05:28:34.726Z</updated>
    
    <content type="html"><![CDATA[<p>##1.洛谷-P1296 奶牛的耳语<br /><img src="https://img-blog.csdnimg.cn/20191214140215863.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="题目如图" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">intmain()</span><br><span class="line">&#123;</span><br><span class="line">intn,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</span><br><span class="line">inta[n];</span><br><span class="line">intg=<span class="number">0</span>;</span><br><span class="line">inttemp;</span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(intj=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[i])&#123;</span><br><span class="line">temp=a[i];</span><br><span class="line">a[i]=a[j];</span><br><span class="line">a[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(intj=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>((a[j]-a[i])&lt;=d)&#123;</span><br><span class="line">g++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,g);</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果两个测试点超时了<br />艳玲学姐说是冒泡的时间复杂度高，要用快排</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">intinc(constvoid*a,constvoid*b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>*(<span class="keyword">int</span>*)a-*(<span class="keyword">int</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qsort(a,n,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),inc);</span><br></pre></td></tr></table></figure><p>了解了一下快排<br />感觉很神奇</p><p><a href="https://mp.weixin.qq.com/s/PQLC7qFjb74kt6PdExP8mw" target="_blank" rel="noopener">漫画：什么是快速排序？（完整版）</a></p><p>##2.汇编语言学习<br />####ds 和[address]</p><blockquote><p>将 1000：0 中的数据读到 al 中：</p><p>movbx,1000H<br />movds,bx<br />moval,[0]</p></blockquote><p>[…]里表示的是偏移地址，执行第三条指令时 cpu 自动取 ds 中的数据作为内存单元的段地址</p><p>ds 是段寄存器，不能用 movds,1000H，只能用一个寄存器进行中转。</p><p>####movaddsub 指令</p><p>mov/sub/add 寄存器，数据<br />mov/sub/add 寄存器，寄存器<br />mov/sub/add 寄存器&lt;----&gt;内存单元</p><p>mov 段寄存器&lt;----&gt;寄存器<br />mov 内存单元&lt;----&gt;段寄存器</p><p>sub 和 add 不能对段寄存器操作</p><p>####栈：<br />入栈：将一个新的元素放到栈顶<br />出栈：从栈顶取出一个元素<br />栈顶的元素总是最后入栈，需要出栈时又最先被从栈中取出</p><p>######栈机制：<br />都以字为单位进行<br />push 入栈<br />pop 出栈<br />高地址单元存放高 8 位，低地址单元存放低 8 位</p><p>cpu 如何知道某段空间被当作栈来使用？------栈顶的段地址存放在段寄存器 SS 中。<br />cpu 如何知道哪个单元时栈顶单元？------偏移地址存放在寄存器 SP 中。</p><p>pushax 执行时：<br />1.sp=sp-2，ss：sp 只想当前栈顶前面的单元，以当前栈顶前面的单元为新栈顶 2.将 ax 中的内容送入 ss：sp 指向的内存单元处</p><p>栈空，ss：sp 指向占空间最高地址单元的下一个单元：<br />如果将 10000H~1000FH 这段空间当作栈，此时 ss=1000，sp=0010</p><p>######栈顶超界：<br />push：sp=sp-2，将栈空间外的数据覆盖<br />pop：sp=sp+2，再 push 后将栈空间外的数据覆盖</p><p>#####push、pop 指令<br />*push：先改变 sp，后向 ss：sp 传送<br />*pop：先读取 ss：sp 处数据，后改变 sp</p><p>栈顶变化范围最大为 0~FFFFH<br />栈空：sp=0<br />栈满：sp=0</p><p>pop 后栈内数据不变化</p><p>##3.搭 kali 1.下载并安装 VMwareWorkstationpro、下载 KaliLinux64-bitVMware 2.打开虚拟机<img src="https://img-blog.csdnimg.cn/2019121415301690.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 3.浏览网页的时候发现中文不能显示，就按照<a href="https://blog.csdn.net/dust_hk/article/details/103299136" target="_blank" rel="noopener">解决 kali-2019.4 中文乱码问题</a>解决了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1.洛谷-P1296 奶牛的耳语&lt;br /&gt;
&lt;img src=&quot;https://img-blog.csdnimg.cn/20191214140215863.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpd
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="汇编" scheme="https://brubbish.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2019.12.01-2019.12.07</title>
    <link href="https://brubbish.github.io/34683.html"/>
    <id>https://brubbish.github.io/34683.html</id>
    <published>2019-12-07T06:48:48.000Z</published>
    <updated>2020-03-30T05:28:34.086Z</updated>
    
    <content type="html"><![CDATA[<p>##1. 洛谷-P1028 数的计算</p><p><img src="https://img-blog.csdnimg.cn/2019120714254339.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="题目如图" /></p><p>第一次写的时候大概思路：<img src="https://img-blog.csdnimg.cn/20191207142716854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">intcal(intn)&#123;</span><br><span class="line">intsum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">returnsum;</span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">sum=sum+cal(i);</span><br><span class="line">returnsum;</span><br><span class="line">&#125;</span><br><span class="line">intmain()&#123;</span><br><span class="line">intn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,cal(n));</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果有 15 个超时了。<br />前几天看别人的题解没看懂，打算写完周报再看一下。</p><p>##2. 递归优化</p><blockquote><p>有关递归的一些优化思路 1. 考虑是否重复计算告诉你吧，如果你使用递归的时候不进行优化，是有非常非常非常多的子问题被重复计算的。啥是子问题？f(n-1), f(n-2)… . 就是 f(n)的子问题了。例如对于案例 2 那道题，f(n)=f(n-1)+f(n-2)。递归调用的状态图如下：&lt;imgsrc=“<a href="https://pic2.zhimg.com/v2-32f657a7a8e409a130f196fc34948291_b.jpg%22data-caption=%22%22data-size=%22normal%22data-rawwidth=%22729%22data-rawheight=%22444%22data-default-watermark-src=%22https://pic1.zhimg.com/v2-45ac6014f7b3cf95a66b50126b80a990_b.jpg%22class=%22origin_imagezh-lightbox-thumb%22width=%22729%22data-original=%22https://pic2.zhimg.com/v2-32f657a7a8e409a130f196fc34948291_r.jpg" target="_blank" rel="noopener">https://pic2.zhimg.com/v2-32f657a7a8e409a130f196fc34948291_b.jpg&quot;data-caption=&quot;&quot;data-size=&quot;normal&quot;data-rawwidth=&quot;729&quot;data-rawheight=&quot;444&quot;data-default-watermark-src=&quot;https://pic1.zhimg.com/v2-45ac6014f7b3cf95a66b50126b80a990_b.jpg&quot;class=&quot;origin_imagezh-lightbox-thumb&quot;width=&quot;729&quot;data-original=&quot;https://pic2.zhimg.com/v2-32f657a7a8e409a130f196fc34948291_r.jpg</a>”/&gt;看到没有，递归计算的时候，重复计算了两次 f(5)，五次 f(4)。。。。这是非常恐怖的，n 越大，重复计算的就越多，所以我们必须进行优化。如何优化？一般我们可以把我们计算的结果保证起来，例如把 f(4)的计算结果保证起来，当再次要计算 f(4)的时候，我们先判断一下，之前是否计算过，如果计算过，直接把 f(4)的结果取出来就可以了，没有计算过的话，再递归计算。用什么保存呢？可以用数组或者 HashMap 保存，我们用数组来保存把，把 n 作为我们的数组下标，f(n)作为值，例如 arr[n]=f(n)。f(n)还没有计算过的时候，我们让 arr[n]等于一个特殊值，例如 arr[n]=-1。当我们要判断的时候，如果 arr[n]=-1，则证明 f(n)没有计算过，否则，f(n)就已经计算过了，且 f(n)=arr[n]。直接把值取出来就行了。代码如下：//我们实现假定 arr 数组已经初始化好的了。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">intf(intn)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">returnn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先判断有没计算过</span></span><br><span class="line"><span class="keyword">if</span>(arr[n]!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="comment">//计算过，直接返回</span></span><br><span class="line">returnarr[n];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//没有计算过，递归计算,并且把结果保存到arr数组里</span></span><br><span class="line">arr[n]=f(n<span class="number">-1</span>)+f(n<span class="number">-1</span>);</span><br><span class="line">reutrnarr[n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也就是说，使用递归的时候，必要须要考虑有没有重复计算，如果重复计算了，一定要把计算过的状态保存起来。2. 考虑是否可以自底向上对于递归的问题，我们一般都是从上往下递归的，直到递归到最底，再一层一层着把值返回。不过，有时候当 n 比较大的时候，例如当 n=10000 时，那么必须要往下递归 10000 层直到 n&lt;=1 才将结果慢慢返回，如果 n 太大的话，可能栈空间会不够用。对于这种情况，其实我们是可以考虑自底向上的做法的。例如我知道 f(1)=1; f(2)=2; 那么我们就可以推出 f(3)=f(2)+f(1)=3。从而可以推出 f(4), f(5)等直到 f(n)。因此，我们可以考虑使用自底向上的方法来取代递归，代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">publicintf(intn)&#123;</span><br><span class="line">if(n&lt;&#x3D;2)</span><br><span class="line">returnn;</span><br><span class="line">intf1&#x3D;1;</span><br><span class="line">intf2&#x3D;2;</span><br><span class="line">intsum&#x3D;0;</span><br><span class="line">for(inti&#x3D;3; i&lt;&#x3D;n; i++)&#123;</span><br><span class="line">sum&#x3D;f1+f2;</span><br><span class="line">f1&#x3D;f2;</span><br><span class="line">f2&#x3D;sum;</span><br><span class="line">&#125;</span><br><span class="line">returnsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方法，其实也被称之为递推。<br />作者：帅地<br />链接：<a href="https://www.zhihu.com/question/31412436/answer/683820765" target="_blank" rel="noopener">https://www.zhihu.com/question/31412436/answer/683820765</a><br />来源：知乎<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>##2.链表的查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">voidfind(structstud*p)&#123;</span><br><span class="line">structstud*p1=p;</span><br><span class="line">intnum=<span class="number">0</span>;</span><br><span class="line">charname[<span class="number">10</span>];</span><br><span class="line">intflag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"find:1.numor2.name?"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"typeaname:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,name);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span>(p1-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(name,p1-&gt;name)!=<span class="number">0</span>)&#123;</span><br><span class="line">p1=p1-&gt;next;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num);</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"notfound\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">inti=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"typeanumber:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="keyword">while</span>(i!=num&amp;&amp;p1-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">p1=p1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p1-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrongnumber"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,p1-&gt;name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最开始写的时候把 num 和 name[10]放在一个共用体里，没考虑到共用体里只能有一个成员有值… …</p><p>##3. 汇编语言学习：</p><p>###1-存储单元：</p><pre><code>bit（一个二进制位），8位bit，8个bit组成一个byte（字节）</code></pre><p>###2-cpu 对存储器的读写：<br />和外部器件进行三类信息交互：</p><pre><code>1.存储单元的地址（地址信息）；2.器件的选择，读或写（控制信息）；3.读或写的数据（数据信息）；cpu通过总线传输信息，总线分为：地址，，控制，，数据，，一个cpu有n根地址线，可一次传送n位二进制数据，地址总线宽度为n，这样的cpu最多可以对2^n个内存单元进行寻址控制总线：“读信号输出”“写信号输出”</code></pre><p>存储器芯片：</p><pre><code>读写属性：随机存储器（ram）只读存储器（rom）功能和连接：随机存储器，存放供cpu使用的绝大部分程序和数据接口卡上的ram，如显存装有bios的rom（在主板和各类接口卡上，如显卡，网卡）</code></pre><p>内存地址空间：</p><pre><code>内存地址空间地址段分配基于硬件系统编程必须知道这个系统中的内存地址空间分配情况，想在某类存储器中读写数据的时候必须知道它的第一个单元的地址和最后一个单元的地址</code></pre><p><img src="https://img-blog.csdnimg.cn/20191205180311107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>###3-汇编指令：<br />不区分大小写</p><p>movah, 78 == 将 18 送入寄存器 ax<br />movax, bx == 将寄存器 bx 中的数据送入寄存器 ax<br />addax, bx == 将 ax 和 bx 中的数值相加，结果存在 ax 中</p><p>ax 中数值为 00C5H，执行 addal，93H 后，ax 中数据为：0058H，不为 0058H，因为此时 al 是作为一个独立的 8 位寄存器，与 ah 没有关系。</p><p>8086cpu<br />16 位结构（16 位机、字长为 16 位）：</p><ol><li>运算器一次最多可以处理 16 位的数据</li><li>寄存器的最大宽度为 16 位</li><li>运算器和寄存器之间的通路为 16 位</li></ol><p>两个 16 位地址（段地址、偏移地址）合成一个 20 位物理地址<br />段地址和偏移地址通过内部总线送入地址加法器，合成后通过内部总线–&gt;输入输出控制电路–&gt;地址总线–&gt;存储器<br />地址加法器中，物理地址=段地址<em>16+偏移地址<br />（段地址</em>16 表现为 16 进制时向左移一位，2 进制时移动 4 位）<br />（一个 x 进制的数据向左移动 n 位，相当于乘以 x^n)</p><p>内存没有分段，段的划分来自于 cpu，cpu 可以用不同段地址和偏移地址形成同一个物理地址<br />对于 8086pc 机，“数据在 21F60H 内存单元中”=“数据存在内存 2000：1F60 单元中”=“数据存在内存的 2000H 段中的 1F60H 单元中”</p><p>###4.-段寄存器（segmentregister）<br />提供段地址<br />6 个段寄存器：<br />cs（code）<br />ds（data）<br />ss（stack）<br />es（extra）<br />*32 位：fs（flag）gs（global）</p><p>###5-CS、IP<br />cs 为代码段寄存器，IP 为指令指针寄存器<br />物理地址=CS*16+IP</p><p>cpu 读取指令后，指令进入指令缓冲器，IP 的值自动增加，增加长度等于当前读入指令长度</p><p>cpu 刚开始工作时，CS=FFFFH, IP=0000H, 即从 FFFF0H 单元读取指令执行。<br />改变 CS、IP 的值的指令统称为转移指令，如 jmp<br />同时修改 CS、IP:jmp 段地址: 偏移地址<br />只修改 IP:jmp 某一合法寄存器（如 ax/bx）在含义上好似：movIP, ax</p><p>###6-字单元：<br />存放一个字型数据（16 位）的内存单元，由两个地址连续的内存单元组成，高地址内存单元中存放字型数据的高位字节，，，，，<br />起始地址为 n 的字单元简称为 n 地址字单元</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1. 洛谷-P1028 数的计算&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019120714254339.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpd
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
      <category term="汇编" scheme="https://brubbish.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>2019.11.25-2019.11.30</title>
    <link href="https://brubbish.github.io/32145.html"/>
    <id>https://brubbish.github.io/32145.html</id>
    <published>2019-11-30T06:59:09.000Z</published>
    <updated>2020-03-30T05:28:33.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1pta-寻找完美数"><a class="markdownIt-Anchor" href="#1pta-寻找完美数"></a> 1.PTA-寻找完美数</h2><p><img src="https://img-blog.csdnimg.cn/20191129134009445.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="题目如图" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">intjudge(inti)&#123;</span><br><span class="line">intj=<span class="number">0</span>;</span><br><span class="line">intn=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(intk=<span class="number">2</span>;k&lt;i;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%k==<span class="number">0</span>)&#123;</span><br><span class="line">j++;</span><br><span class="line">n=n+k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">inta=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n==i&amp;&amp;i!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line">returna;</span><br><span class="line">&#125;</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">intmain()&#123;</span><br><span class="line">inta,b;</span><br><span class="line">intj=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span>(inti=a;i&lt;=b;i++)&#123;</span><br><span class="line">j=judge(i);</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">1</span>)&#123;</span><br><span class="line">c=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"None"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是第一次提交的，结果只对了一个，其他都是格式错误，感觉应该是结尾不能有空格，就将 main 函数里的参数 c 传入 judge 函数，判断输出的是否是第一个完美数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">intjudge(inti,intc)&#123;</span><br><span class="line">intj=<span class="number">0</span>;</span><br><span class="line">intn=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(intk=<span class="number">2</span>;k&lt;i;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%k==<span class="number">0</span>)&#123;</span><br><span class="line">j++;</span><br><span class="line">n=n+k+i/k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">inta=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n==i&amp;&amp;i!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line">returna;</span><br><span class="line">&#125;</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次提交的时候有一个测试点没有通过，猜测是 i 太大的时候超时了，于是把 judge 函数里循环的循环条件改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k&lt;<span class="built_in">sqrt</span>(i)</span><br></pre></td></tr></table></figure><p>就通过了。</p><p>##2.PTA-验证“哥德巴赫猜想”<br /><img src="https://img-blog.csdnimg.cn/20191129234420522.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">intprime(intq)&#123;</span><br><span class="line">inti=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q%i==<span class="number">0</span>)&#123;</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(q==i)&#123;</span><br><span class="line">return1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">intmain()&#123;</span><br><span class="line">intn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">intm;</span><br><span class="line">m=<span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</span><br><span class="line">inta;</span><br><span class="line">intta1;</span><br><span class="line">intta2;</span><br><span class="line"><span class="keyword">for</span>(intp=<span class="number">2</span>;p&lt;n/<span class="number">2</span>;p++)&#123;</span><br><span class="line">ta1=<span class="number">0</span>;</span><br><span class="line">ta2=<span class="number">0</span>;</span><br><span class="line">a=n-p;</span><br><span class="line"><span class="keyword">if</span>(prime(p)==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(prime(a)==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d=%d+%d"</span>,n,p,a);</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次提交的时候长这样，依旧是最大 N 的时候运行超时，想了好久不知道怎么改，上网搜了一下：<a href="https://blog.csdn.net/solitarily/article/details/78557649" target="_blank" rel="noopener">7-6 验证“哥德巴赫猜想”（20 分）</a>得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime</span><span class="params">(intn)</span></span>&#123;</span><br><span class="line"><span class="comment">//判断n为偶数时</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">return1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;<span class="number">2</span>||n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断n为奇数时</span></span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">3</span>;i*i&lt;=n;i=i+<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">intn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"4=2+2"</span>);</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(inti=<span class="number">2</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(prime(i)&amp;&amp;prime(n-i))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d=%d+%d"</span>,n,i,n-i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3洛谷-p2089-烤鸡"><a class="markdownIt-Anchor" href="#3洛谷-p2089-烤鸡"></a> 3.洛谷-P2089 烤鸡</h2><p><img src="https://img-blog.csdnimg.cn/201911300913530.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />只想到了这个方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">intmain()&#123;</span><br><span class="line">intn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">30</span>||n&lt;<span class="number">10</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br><span class="line">intcnt=<span class="number">0</span>;</span><br><span class="line">inta,b,c,d,e,f,g,h,i,j;</span><br><span class="line"><span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">1</span>;b&lt;=<span class="number">3</span>;b++)</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=<span class="number">3</span>;c++)</span><br><span class="line"><span class="keyword">for</span>(d=<span class="number">1</span>;d&lt;=<span class="number">3</span>;d++)</span><br><span class="line"><span class="keyword">for</span>(e=<span class="number">1</span>;e&lt;=<span class="number">3</span>;e++)</span><br><span class="line"><span class="keyword">for</span>(f=<span class="number">1</span>;f&lt;=<span class="number">3</span>;f++)</span><br><span class="line"><span class="keyword">for</span>(g=<span class="number">1</span>;g&lt;=<span class="number">3</span>;g++)</span><br><span class="line"><span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=<span class="number">3</span>;h++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(a+b+c+d+e+f+g+h+i+j==n)</span><br><span class="line">cnt++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line"><span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">3</span>;a++)</span><br><span class="line"><span class="keyword">for</span>(b=<span class="number">1</span>;b&lt;=<span class="number">3</span>;b++)</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=<span class="number">3</span>;c++)</span><br><span class="line"><span class="keyword">for</span>(d=<span class="number">1</span>;d&lt;=<span class="number">3</span>;d++)</span><br><span class="line"><span class="keyword">for</span>(e=<span class="number">1</span>;e&lt;=<span class="number">3</span>;e++)</span><br><span class="line"><span class="keyword">for</span>(f=<span class="number">1</span>;f&lt;=<span class="number">3</span>;f++)</span><br><span class="line"><span class="keyword">for</span>(g=<span class="number">1</span>;g&lt;=<span class="number">3</span>;g++)</span><br><span class="line"><span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=<span class="number">3</span>;h++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(a+b+c+d+e+f+g+h+i+j==n)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%d%d%d%d%d%d%d%d%d\n"</span>,a,b,c,d,e,f,g,h,i,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然通过了但是觉得这样太傻了<br />不过别人交的题解也没看懂…<br />感觉这个方法挺特别的：<br /><img src="https://img-blog.csdnimg.cn/20191130094135480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JydWlzaGk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />##4.链表<br />周二在 b 站上看了个讲解单链表的教程：<a href="https://www.bilibili.com/video/av418203?from=search&amp;seid=9482584295121953132" target="_blank" rel="noopener">C 语言入门教程第 13 讲动态内存分配和链表</a>，跟着打了两遍，看代码理解了一遍，感觉还不是很懂，就尝试自己打了一下。<br />然后顺便把教程里没说的删除弄出来了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">structstud&#123;</span><br><span class="line">charname[<span class="number">10</span>];</span><br><span class="line">structstud*next;</span><br><span class="line">&#125;;</span><br><span class="line">voidprint(structstud*p);</span><br><span class="line"><span class="function">structstud*<span class="title">remove</span><span class="params">(structstud*p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">structstud*<span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">structstud*current,*nextp,*head;</span><br><span class="line">head=(structstud*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstud));</span><br><span class="line">charstr[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"typeaname："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">strcpy</span>(head-&gt;name,str);</span><br><span class="line">current=head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chara;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"keepdoing?\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;a);</span><br><span class="line"><span class="keyword">while</span>(a==<span class="string">'y'</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"typeaname："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nextp=(structstud*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstud));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(nextp-&gt;name,str);</span><br><span class="line">current-&gt;next=nextp;</span><br><span class="line">current=nextp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"keepdoing?\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">current-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">returnhead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">structstud*<span class="title">insert</span><span class="params">(structstud*p)</span></span>&#123;</span><br><span class="line">structstud*insert,*current;</span><br><span class="line">intposition;</span><br><span class="line">charstr[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"insertposition:\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="built_in">position</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"typeaname:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line">current=p;</span><br><span class="line">insert=(structstud*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(structstud));</span><br><span class="line"><span class="built_in">strcpy</span>(insert-&gt;name,str);</span><br><span class="line"></span><br><span class="line">insert-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">position</span>!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">position</span>&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">current=current-&gt;next;</span><br><span class="line"><span class="built_in">position</span>--;</span><br><span class="line">&#125;<span class="comment">//current=insert-1;</span></span><br><span class="line">insert-&gt;next=current-&gt;next;</span><br><span class="line">current-&gt;next=insert;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">insert-&gt;next=current;</span><br><span class="line">p=insert;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\npresentelement:\n"</span>);</span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line">returnp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">intmain()&#123;</span><br><span class="line">structstud*p;</span><br><span class="line">p=build();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"presentelement:\n"</span>);</span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line"></span><br><span class="line">charb=<span class="string">'b'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"insert?yorn"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;b);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span>(b!=<span class="string">'n'</span>)&#123;</span><br><span class="line">p=insert(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"insert?yorn"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;b);</span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">charc;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"deleteaname?yorn"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span>(c!=<span class="string">'n'</span>)&#123;</span><br><span class="line">p=<span class="built_in">remove</span>(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"deleteaname?yorn"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line">return0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">voidprint(structstud*p)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,p-&gt;name);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,p-&gt;name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">structstud*<span class="title">remove</span><span class="params">(structstud*p)</span></span>&#123;</span><br><span class="line">structstud*<span class="built_in">position</span>,*current=p;</span><br><span class="line">intpo;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"place:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;po);</span><br><span class="line"><span class="keyword">if</span>(po!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(po!=<span class="number">1</span>)&#123;</span><br><span class="line">current=current-&gt;next;</span><br><span class="line">po--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">position</span>=current;</span><br><span class="line"><span class="built_in">position</span>=<span class="built_in">position</span>-&gt;next;</span><br><span class="line">current-&gt;next=<span class="built_in">position</span>-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p=current-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(current);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"currentlist:\n"</span>);</span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line">returnp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1pta-寻找完美数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1pta-寻找完美数&quot;&gt;&lt;/a&gt; 1.PTA-寻找完美数&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/201911291
      
    
    </summary>
    
    
    
      <category term="周报" scheme="https://brubbish.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
</feed>
